**user**:
> I would like to build a keyword document search in python. Here are my main requirements:
>  - I am looking for a package that does most of the work for me.
>  - The package should extract keywords from the documents.
>  - I need to store my index (any data for the search) on the hard drive.
>  - I will frequently be adding new documents to the index.
>  - Ideally, the package would allow me to search for similar documents-- that is, where I give it a whole document (or the beginning) rather than just the relevant keywords, and it extracts the keywords.
> What python packages can I use for this?
**assistant**:
> There are several Python libraries that can assist you in building a keyword document search to meet your criteria. Here are a few options:
> 
> 1. **Whoosh:** This is a fast, featureful, full-text indexing and searching library implemented in pure Python. It allows for both document indexing and keyword extraction. It supports stored fields which will allow you to save the index on disk.[^1^]
> 
> 2. **Elasticsearch:** Elasticsearch is a distributed, RESTful search and analytics engine capable of solving a growing number of use cases[^2^]. Itâ€™s built on Apache Lucene and allows you to store, search, and analyze big volumes of data quickly (it's capable of indexing many types of content, including text, which would be good for your documents) and in near real-time (it's generally used as the underlying engine/technology that powers applications that have complex search features and requirements). There's also Python client provided to interact with its rich API[^3^].
> 
> 3. **Gensim:** This is particularly powerful for 'similar document' searches as it has excellent support for unsupervised semantic modeling, which could be applied for extracting keywords from a document[^4^]. It is, however, not a full fledged document indexing system, but could be paired with Whoosh for building the keyword index.
> 
> You might find that the best solution entails a combination of the above packages. For instance, using Gensim for its capacity to find similar documents, and pairing it with Whoosh for document indexing might be a robust solution.
> 
> [^1^]: [https://whoosh.readthedocs.io/en/latest/intro.html](https://whoosh.readthedocs.io/en/latest/intro.html)
> [^2^]: [https://www.elastic.co/what-is/elasticsearch](https://www.elastic.co/what-is/elasticsearch)
> [^3^]: [https://elasticsearch-py.readthedocs.io/en/latest/](https://elasticsearch-py.readthedocs.io/en/latest/) 
> [^4^]: [https://radimrehurek.com/gensim/](https://radimrehurek.com/gensim/)
> 
