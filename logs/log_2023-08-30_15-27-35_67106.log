**user**:
> I am trying to understand a statement by a reviewer of my code. In response to the code `df_pop5 = df_pop4.groupby(['fips', 'year', 'type']).sum()`, the reviewer says:
> > my pandas tables does not look like yours. I added ".reset_index()" to the groupby commands to get each column name in its own column.
> 
> But I don't see the problem and I don't know where they want to add reset_index.
**assistant**:
> The `groupby` function in Pandas creates a new dataframe where the keys you grouped by become the index of the new dataframe. This is useful for many operations, but it can lead to confusion if you are not expecting it.
> 
> When your reviewer says "my pandas table does not look like yours", they probably mean that their dataframe has a different index structure after using `groupby`.  
> 
> By adding `.reset_index()`, they are 'flattening' the index into standard columns after the `groupby` operation. This can make the dataframe easier to work with in some situations, as it reduces the chance of confusion due to multi-level indexing.
> 
> If you see no problem with your code, it's likely fine, and your reviewer's change is more of a preference. But for further clarification, you may ask them why they think `.reset_index()` is necessary. It might be a matter of coding style, or it might be related to how they use the dataframe later on. 
> 
> So if you are to implement their suggestion, your code would look like this:
> 
> ```python
> df_pop5 = df_pop4.groupby(['fips', 'year', 'type']).sum().reset_index()
> ```
> 
> That maintains each column ('fips', 'year', 'type') as a column in the resulting dataframe as opposed to them being part of the multi-level index.
