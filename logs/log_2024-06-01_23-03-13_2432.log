**assistant**:
> Below are selected log entries of past conversations, as part of an experimental AI memory system. T
**user**:
> I am getting emails through IMAP with the following function:
> ```
> def get_emails(mail, num_emails=10):
>     # Fetch emails
>     status, messages = mail.search(None, "ALL")
>     email_ids = messages[0].split()[-num_emails:]
> 
>     # Process emails
>     for email_id in email_ids:
>         status, msg_data = mail.fetch(email_id, "(RFC822)")
>         for response_part in msg_data:
>             if isinstance(response_part, tuple):
>                 msg = email.message_from_bytes(response_part[1])
> 
>                 # Decode email subject
>                 subject, encoding = decode_header(msg["Subject"])[0]
>                 if isinstance(subject, bytes):
>                     subject = subject.decode(encoding if encoding else "utf-8")
> 
>                 # Decode email sender
>                 from_, encoding = decode_header(msg.get("From"))[0]
>                 if isinstance(from_, bytes):
>                     from_ = from_.decode(encoding if encoding else "utf-8")
> 
>                 # Process email content
>                 if msg.is_multipart():
>                     for part in msg.walk():
>                         content_type = part.get_content_type()
>                         content_disposition = str(part.get("Content-Disposition"))
> 
>                         if "attachment" not in content_disposition:
>                             body = part.get_payload(decode=True)
>                             if body is not None:
>                                 yield subject, from_, body.decode('utf-8', errors='ignore')
>                 else:
>                     body = msg.get_payload(decode=True)
>                     if body is not None:
>                         yield subject, from_, body.decode('utf-8', errors='ignore')
> ```
> What should I add to that to also get out the datetime of the email?
**assistant**:
> To extract the datetime of the email, you can include parsing of the `Date` header within the function. Here's how you can modify your existing function to include the datetime of each email:
> 
> ```python
> import email
> from email.header import decode_header
> from email.utils import parsedate_to_datetime
> 
> def get_emails(mail, num_emails=10):
>     # Fetch emails
>     status, messages = mail.search(None, "ALL")
>     email_ids = messages[0].split()[-num_emails:]
> 
>     # Process emails
>     for email_id in email_ids:
>         status, msg_data = mail.fetch(email_id, "(RFC822)")
>         for response_part in msg_data:
>             if isinstance(response_part, tuple):
>                 msg = email.message_from_bytes(response_part[1])
> 
>                 # Decode email subject
>                 subject, encoding = decode_header(msg["Subject"])[0]
>                 if isinstance(subject, bytes):
>                     subject = subject.decode(encoding if encoding else "utf-8")
> 
>                 # Decode email sender
>                 from_, encoding = decode_header(msg.get("From"))[0]
>                 if isinstance(from_, bytes):
>                     from_ = from_.decode(encoding if encoding else "utf-8")
> 
>                 # Parse email date
>                 date_header = msg.get("Date")
>                 email_date = parsedate_to_datetime(date_header)
> 
>                 # Process email content
>                 if msg.is_multipart():
>                     for part in msg.walk():
>                         content_type = part.get_content_type()
>                         content_disposition = str(part.get("Content-Disposition"))
> 
>                         if "attachment" not in content_disposition:
>                             body = part.get_payload(decode=True)
>                             if body is not None:
>                                 yield subject, from_, email_date, body.decode('utf-8', errors='ignore')
>                 else:
>                     body = msg.get_payload(decode=True)
>                     if body is not None:
>                         yield subject, from_, email_date, body.decode('utf-8', errors='ignore')
> 
> # Example of usage
> # mail is an IMAP4_SSL object connected to the mail server and logged in
> # for subject, from_, email_date, body in get_emails(mail):
> #     print(f"Subject: {subject}")
> #     print(f"From: {from_}")
> #     print(f"Date: {email_date}")
> #     print(f"Body: {body}")
> ```
> 
> With this modification, the `get_emails` function now also yields the datetime of the email (parsed with `parsedate_to_datetime` from the `email.utils` module). Each `yield` statement includes the subject, the sender, the datetime, and the body of the email.
