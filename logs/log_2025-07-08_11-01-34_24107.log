**user**:
> How can I take a string containing a list of authors and turn it into something like:
> Rising (if 1 author)
> Rising & Falling (if 2 authors)
> Rising et al. (if > 2 authors)
> World Bank (if an institution)
> 
> The authors are listed with last names first and separated by semicolons. Here are examples:
> "Marzouk S.H.; Kwaslema D.R.; Omar M.M.; Mohamed S.H."
> "Jäpölä J.-P.; Van Schoubroeck S.; Van Passel S."
> "Albrecht, EC; Dobbert, S; Pape, R; Löffler, J"
**assistant**:
> To transform a string of authors into the desired citation styles, we can take these steps:
> 
> 1. Split the authors by the semicolon delimiter.
> 2. Count the number of authors.
> 3. Apply the specific format based on the number of authors (or if it's an institution).
> 
> Here's a Python function to achieve this:
> 
> ```python
> def format_authors(authors):
>     # Split the string by semicolons
>     author_list = [author.strip() for author in authors.split(';')]
>     
>     # Handle edge case for institutions (assuming only one name)
>     if len(author_list) == 1 and ' ' not in author_list[0]:
>         return author_list[0]
>     
>     # Remove any potential middle names or initials (everything after the first comma)
>     author_list = [author.split(',')[0] for author in author_list]
>     
>     # Check the number of authors and format appropriately
>     if len(author_list) == 1:
>         return author_list[0]
>     elif len(author_list) == 2:
>         return f"{author_list[0]} & {author_list[1]}"
>     else:
>         return f"{author_list[0]} et al."
> 
> # Examples
> example_1 = "Marzouk S.H.; Kwaslema D.R.; Omar M.M.; Mohamed S.H."
> example_2 = "Jäpölä J.-P.; Van Schoubroeck S.; Van Passel S."
> example_3 = "Albrecht, EC; Dobbert, S; Pape, R; Löffler, J"
> 
> print(format_authors(example_1))  # Output: "Marzouk et al."
> print(format_authors(example_2))  # Output: "Jäpölä et al."
> print(format_authors(example_3))  # Output: "Albrecht et al."
> ```
> 
> This function handles different numbers of authors and formats accordingly, while ignoring any initials or other variations that might come after a comma. You might need to further customize it if there are additional patterns or specific institutional names you regularly encounter. Let me know if you need any adjustments!
