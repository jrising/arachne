**user**:
> Below is a collection of material that I am in the process of
> archiving. It starts with a short description, and then the content of
> all files (typically generated with 
> `find . -print -exec cat {} \; -printf "\n=====\n"`).
> 
> I will generally try to provide some context, in addition to the file
> content. Please include this in your generated summary.
> 
> Please generate a summary document, using twiki syntax:
> 
> ! [Project title]
> 
> [Provide a summary description of the project.
> 
> Archived at: [James to Fill in]
> 
> !! Status when archived
> 
> [Give a summary of what was done and what was left to be done for a
> working system.]
> 
> !! Notable contributions
> 
> [Give a summary of data, programming, or personal innovations to keep
> track of.]
> 
> !! Keywords
> 
> [Provide a list of keywords for finding this project in the future.]
> A phone app that shows little actions you can do to make the world better, where the actions can be collectively designed to coordinate (e.g., you take a bike to your corner; someone else buys something from a store; someone bikes the purchased thing where it needs to go).
> 
> ./controllers/pages_controller.rb
> class PagesController < ApplicationController
>   # GET /pages
>   # GET /pages.xml
>   def index
>     @pages = Page.all
> 
>     respond_to do |format|
>       format.html # index.html.erb
>       format.xml  { render :xml => @pages }
>     end
>   end
> 
>   # GET /pages/1
>   # GET /pages/1.xml
>   def show
>     @page = Page.find(params[:id])
> 
>     respond_to do |format|
>       format.html # show.html.erb
>       format.xml  { render :xml => @page }
>     end
>   end
> 
>   # GET /pages/new
>   # GET /pages/new.xml
>   def new
>     @page = Page.new
> 
>     respond_to do |format|
>       format.html # new.html.erb
>       format.xml  { render :xml => @page }
>     end
>   end
> 
>   # GET /pages/1/edit
>   def edit
>     @page = Page.find(params[:id])
>   end
> 
>   # POST /pages
>   # POST /pages.xml
>   def create
>     @page = Page.new(params[:page])
> 
>     respond_to do |format|
>       if @page.save
>         flash[:notice] = 'Page was successfully created.'
>         format.html { redirect_to(@page) }
>         format.xml  { render :xml => @page, :status => :created, :location => @page }
>       else
>         format.html { render :action => "new" }
>         format.xml  { render :xml => @page.errors, :status => :unprocessable_entity }
>       end
>     end
>   end
> 
>   # PUT /pages/1
>   # PUT /pages/1.xml
>   def update
>     @page = Page.find(params[:id])
> 
>     respond_to do |format|
>       if @page.update_attributes(params[:page])
>         flash[:notice] = 'Page was successfully updated.'
>         format.html { redirect_to(@page) }
>         format.xml  { head :ok }
>       else
>         format.html { render :action => "edit" }
>         format.xml  { render :xml => @page.errors, :status => :unprocessable_entity }
>       end
>     end
>   end
> 
>   # DELETE /pages/1
>   # DELETE /pages/1.xml
>   def destroy
>     @page = Page.find(params[:id])
>     @page.destroy
> 
>     respond_to do |format|
>       format.html { redirect_to(pages_url) }
>       format.xml  { head :ok }
>     end
>   end
> end
> 
> =====
> ./controllers/home_controller.rb
> class HomeController < ApplicationController
>   def index
>   end
> 
> end
> 
> =====
> ./controllers/api_controller.rb
> class ApiController < ApplicationController
>   def page_next
>     @page = Page.find(:first, :order => 'rand()')
>     
>     respond_to do |format|
>       format.json { render :json => @page }
>       format.xml { render :xml => @page }
>     end
>   end
> 
>   def page
>     @page = Page.find(params[:id])
> 
>     respond_to do |format|
>       format.json { render :json => @page }
>       format.xml { render :xml => @page }
>     end
>   end
> end
> 
> =====
> ./controllers/application_controller.rb
> # Filters added to this controller apply to all controllers in the application.
> # Likewise, all the methods added will be available for all controllers.
> 
> class ApplicationController < ActionController::Base
>   helper :all # include all helpers, all the time
>   protect_from_forgery # See ActionController::RequestForgeryProtection for details
> 
>   # Scrub sensitive parameters from your log
>   # filter_parameter_logging :password
> end
> 
> =====
> ./views
> cat: ./views: Is a directory
> ./views/home
> cat: ./views/home: Is a directory
> ./views/home/index.html.erb
> <h1>Welcome</h1>
> 
> <p>See the <%= link_to "Toss List", pages_path %>
> 
> =====
> ./views/pages
> cat: ./views/pages: Is a directory
> ./views/pages/show.html.erb
> <p>
>   <b>Title:</b>
>   <%=h @page.title %>
> </p>
> 
> <p>
>   <b>Html:</b>
>   <%=h @page.html %>
> </p>
> 
> <p>
>   <b>Source:</b>
>   <%=h @page.source %>
> </p>
> 
> <%= link_to 'Edit', edit_page_path(@page) %> |
> <%= link_to 'Back', pages_path %>
> 
> =====
> ./views/pages/new.html.erb
> <h1>New Challenge</h1>
> 
> <% form_for(@page) do |f| %>
>   <%= f.error_messages %>
> 
>   <p>
>     <%= f.label :title %><br />
>     <%= f.text_field :title %>
>   </p>
>   <p>
>     <%= f.label :html %><br />
>     <%= f.text_area :html %>
>   </p>
>   <p>
>     <%= f.label :source %><br />
>     <%= f.text_field :source %>
>   </p>
>   <p>
>     <%= f.submit 'Create' %>
>   </p>
> <% end %>
> 
> <%= link_to 'Back', pages_path %>
> 
> =====
> ./views/pages/index.html.erb
> <h1>Listing challenges</h1>
> 
> <table>
>   <tr>
>     <th>Title</th>
>     <th>Html</th>
>     <th>Source</th>
>   </tr>
> 
> <% @pages.each do |page| %>
>   <tr>
>     <td><%=h page.title %></td>
>     <td><%=h page.html %></td>
>     <td><%=h page.source %></td>
>     <td><%= link_to 'Show', page %></td>
>     <td><%= link_to 'Edit', edit_page_path(page) %></td>
>     <td><%= link_to 'Destroy', page, :confirm => 'Are you sure?', :method => :delete %></td>
>   </tr>
> <% end %>
> </table>
> 
> <br />
> 
> <%= link_to 'New challenge', new_page_path %>
> 
> =====
> ./views/pages/edit.html.erb
> <h1>Editing Challenge</h1>
> 
> <% form_for(@page) do |f| %>
>   <%= f.error_messages %>
> 
>   <p>
>     <%= f.label :title %><br />
>     <%= f.text_field :title %>
>   </p>
>   <p>
>     <%= f.label :html %><br />
>     <%= f.text_area :html %>
>   </p>
>   <p>
>     <%= f.label :source %><br />
>     <%= f.text_field :source %>
>   </p>
>   <p>
>     <%= f.submit 'Update' %>
>   </p>
> <% end %>
> 
> <%= link_to 'Show', @page %> |
> <%= link_to 'Back', pages_path %>
> 
> =====
> ./views/layouts
> cat: ./views/layouts: Is a directory
> ./views/layouts/application.html.erb
> <!DOCTYPE html>
> <html>
> <head>
>   <title>Limeeffect</title>
>   <%= stylesheet_link_tag :all %>
>   <%= javascript_include_tag :defaults %>
>   <%= csrf_meta_tag %>
> </head>
> <body>
> 
> <%= yield %>
> 
> </body>
> </html>
> 
> =====
> ./views/layouts/pages.html.erb
> <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
>        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
> 
> <html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
> <head>
>   <meta http-equiv="content-type" content="text/html;charset=UTF-8" />
>   <title>Pages: <%= controller.action_name %></title>
>   <%= stylesheet_link_tag 'scaffold' %>
> </head>
> <body>
> 
> <p style="color: green"><%= flash[:notice] %></p>
> 
> <%= yield %>
> 
> </body>
> </html>
> 
> 
> =====
> ./helpers
> cat: ./helpers: Is a directory
> ./helpers/pages_helper.rb
> module PagesHelper
> end
> 
> =====
> ./helpers/application_helper.rb
> # Methods added to this helper will be available to all templates in the application.
> module ApplicationHelper
> end
> 
> =====
> ./helpers/home_helper.rb
> module HomeHelper
> end
> 
> =====
> ./mailers
> cat: ./mailers: Is a directory
> ./models
> cat: ./models: Is a directory
> ./models/page.rb
> class Page < ActiveRecord::Base
>   validates_uniqueness_of :title
> end
> 
> =====
**assistant**:
> ```twiki
> ---+!! Limeeffect
> 
> Limeeffect is a phone app that shows little actions users can do to make the world better. These actions are collectively designed to coordinate, such as one user taking a bike to a corner where another user buys something from a store, and yet another user bikes the purchased item to its destination.
> 
> Archived at: [James to Fill in]
> 
> ---++ Status when archived
> 
> The project's backend and basic website functionalities are completed. This includes CRUD (Create, Read, Update, Delete) operations for "pages", which are likely tasks or actions users can take. This functionality is managed through the `PagesController` and the corresponding views. The project's front-end appears to be minimal but functional, with basic navigation and form functionality.
> 
> The project needs further development to enhance user experience, add more interactivity, and include the specific coordination features it aims to implement. Moreover, it lacks comprehensive documentation, testing, and security features beyond basic request forgery protection.
> 
> ---++ Notable contributions
> 
>    * **Data Handling**: Implemented ActiveRecord validations to ensure the uniqueness of task titles.
>    * **Backend Architecture**: Set up RESTful routes and controllers for the `Page` model, handling all necessary CRUD operations.
>    * **API Integration**: Provided API endpoints for fetching tasks in JSON and XML formats.
>    * **Frontend**: Basic ERB templates for listing, creating, editing, and showing tasks, ensuring simple and clean navigation.
>    * **Security**: Basic CSRF protection implemented in the application controller.
> 
> ---++ Keywords
> 
>    * Sustainable actions
>    * Collective coordination
>    * Task management
>    * Ruby on Rails
>    * Limeeffect
> ```
