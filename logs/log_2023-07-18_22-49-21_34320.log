**user**:
> In jquery, how do I repeatedly call an ajax command, until the results of that command inform me to stop?
**assistant**:
> You can implement this by using a recursive function that only re-invokes itself if the Ajax response indicates it should. Here is an example:
> 
> ```javascript
> function repeatAjax() {
>     $.ajax({
>         url: 'Your_URL',
>         type: 'GET',
>         success: function (response) {
>             // process the response
>             if (/* condition based on response to continue */) {
>                 repeatAjax(); // Condition met, repeat the Ajax call
>             }
>             else {
>                 // Response indicates to stop, do nothing (end recursion)
>             }
>         },
>         error: function (jqXHR, textStatus, errorThrown) {
>             // Handle any errors
>         }
>     });
> }
> 
> // Call the function to begin the loop
> repeatAjax();
> ```
> 
> In this example, replace `'Your_URL'` with the URL you're making the Ajax request to and `/* condition based on response to continue */` with your condition to continue. The function `repeatAjax` is defined such that it will call itself again if certain conditions in the response are met. If they're not met, it won't call itself, and the 'loop' will be broken.
> 
> Often, in these kinds of scenarios, it's a good idea to include some error handling or a maximum number of retries to prevent potential infinite loops or repeated unnecessary requests.
> 
> Be aware of the fact that this does not actually 'wait' for the Ajax request to complete before moving on to the next line of code after the request. The nature of Ajax is that it is asynchronous, you'd need `async: false` in your Ajax options to make it synchronous (note that synchronous requests are deprecated in jQuery because they block interacting with the browser until the request completes).
> 
