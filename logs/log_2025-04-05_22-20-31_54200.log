**user**:
> In the WebKit speech recognition, can I specify certain known phrases, but still allow the user to give other statements which are otherwise handled?
**assistant**:
> In WebKit's speech recognition API, you can prioritize known phrases using grammars, but it doesn't have built-in support for specifying these alongside allowing free-form input. However, you can implement a form of this functionality by combining WebKit's recognition with your own logic.
> 
> Here's a general approach:
> 
> 1. **Initialize Speech Recognition**: Use the `webkitSpeechRecognition` API to initialize a recognition instance.
> 
> 2. **Recognize Speech Input**: When the user speaks, capture the recognized text.
> 
> 3. **Compare Against Known Phrases**: Check if the recognized text matches any of your predefined phrases.
> 
> 4. **Fallback on Free-form Handlers**: If the recognized text doesn't match a known phrase, send the input to a more flexible handler that can process free-form text.
> 
> 5. **Feedback and Actions**: Respond accordingly based on whether a known phrase was detected or you're handling it as open input.
> 
> Here's an illustrative example in JavaScript:
> 
> ```javascript
> const recognition = new webkitSpeechRecognition();
> recognition.continuous = false;
> recognition.interimResults = false;
> 
> const knownPhrases = ['start game', 'open settings', 'turn off music'];
> 
> recognition.onresult = (event) => {
>   const transcript = event.results[0][0].transcript.toLowerCase().trim();
>   
>   if (knownPhrases.includes(transcript)) {
>     // Handle the specific known phrase
>     console.log(`Matched known phrase: ${transcript}`);
>     // Implement your action for known phrases here
>   } else {
>     // Handle general input
>     console.log(`Free-form input: ${transcript}`);
>     // Implement broader input handling here
>   }
> };
> 
> recognition.start();
> ```
> 
> With this approach, you can prioritize known phrases to trigger specific actions, while still allowing for general and free-form speech input to be processed by other parts of your application. This flexibility can help you provide a rich interactive experience for users.
