**assistant**:
> Below are selected log entries of past conversations, as part of an experimental AI memory system. They may have no bearing on the chat.
> 
> 
>   2023-07-16:
>   James asked about closing a child thread in Python; Arachne suggested using shared variables, not forcefully terminating.
> 
> 
> 
>   2023-09-17:
>   Adding Centered Header to LaTeX Document
> 
> 
> 
>   2023-10-02:
>   Group-wise Mutations in dplyr
> 
> 
> 
>   2023-08-19:
>   Setting up Voice Command on Android for URL Query
> 
> 
> 
>   2023-09-05:
>   Caching Command Results in Julia
> 
> 
> 
>   2023-11-11:
>   TTS App: Thread Termination and Sentence Skipping Fixes
> 
> 
> 
>   2023-11-19:
>   Finishing an Apple-Pear Tart: Baking Tips and Decorative Ideas
> 
> 
> 
>   2023-10-25:
>   Fitting a Random Forest for Flexible Querying
> 
> 
> 
>   2023-07-25:
>   Dell OptiPlex BIOS startup key provided; Instructions on setting up Windows to boot from USB given.
> 
> 
> 
>   2023-12-21:
>   Creating Python Maps of Latitude/Longitude Areas with Geopandas
> 
> 
>     
**user**:
> I'm using the future package in R to do multithreading. Is it recommended to use the `plan(multisession)` command just before I split off a thread (which I do in a loop-- my goal is to be able to kill blocking processes) and go back to `plan(sequential)` right after, or to set up the plan commands at the top and bottom of the whole script?
**assistant**:
> The `plan()` function in the future package creates a plan for how to evaluate futures. It's generally recommended to set the plan at the top of your script and not change it.
> 
> If you want to set up your script to execute tasks either sequentially or in parallel, depending on the resources available, you would set up the plan at the top of the script. For example, if you want to use multisession when possible, you could write:
> 
> ```r
> library(future)
> plan(multisession)
> ```
> 
> Then, all the futures (i.e., code wrapped in `future({})` or passed to `%<-%` operator) will be scheduled to run in separate R sessions in the background when you call `value()`, which retrieves the results.
> 
> However, setting the plan does not necessarily start any threads or processes. It only sets the strategy for when they are called. So there's usually no need to switch back to `plan(sequential)` right after. Doing so could even confuse the interpreter about how to evaluate the futures if they have not all resolved yet.
> 
> In terms of killing blocking processes, you would need to create a timeout mechanism in your futures, as the future package does not currently support killing or stopping futures once they've started.
