**assistant**:
> Below are selected log entries of past conversations, as part of an experimental AI memory system. T
**user**:
> When I use groupby in pandas, how can I return multiple values, like the reframe function in dplyr?
**assistant**:
> Let's say your DataFrame `df` has the columns `A`, `B`, `C` and you want to group by `A` and compute aggregate functions, `f` and `g`, on `B` and `C` respectively, similar to dplyr's `reframe` function in R.
> 
> Here is how you might do it in Pandas:
> 
> ```python
> df.groupby('A').agg({'B': ['f_func'], 'C': ['g_func']})
> ```
> where `'f_func'` and `'g_func'` are placeholder for any function, which could be `'mean'` or `'sum'`, etc.
> 
> For example, if we wanted to compute `mean` of 'B' and `sum` of 'C', it would look like this:
> 
> ```python
> df.groupby('A').agg({'B': ['mean'], 'C': ['sum']})
> ```
> If you wanted to use a custom function `my_func`, you can provide it directly to `agg` as well:
> 
> ```python
> def my_func(series):
>     return series.sum() / len(series) # or whatever you want to compute
> 
> df.groupby('A').agg({'B': my_func, 'C': 'sum'})
> ```
> The result will be a DataFrame with a hierarchical multiindex in the columns. If you want to flatten it, you could add:
> 
> ```python
> df.columns = ['_'.join(col).strip() for col in df.columns.values]
> ```
> 
> This will provide a similar functionality to `reframe` in `dplyr`.
