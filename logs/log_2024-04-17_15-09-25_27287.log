**assistant**:
> Below are selected log entries of past conversations, as part of an experimental AI memory system. T
**user**:
> How do I do a regex expression where after my expression, I look ahead and see if there are any | (vertical bars) in the string and if there are, exclude that?
**assistant**:
> In a regular expression, you can utilize a feature called "negative lookahead" to accomplish this. Coding the expression this way means it will match only if there are no vertical bars '|' ahead in the string. 
> 
> Here's a basic example. Suppose we have the string 'abc|' and we want to match 'abc' only if there is no '|' ahead of it in the string. The appropriate regular expression for this may be `abc(?!.*\|)`. 
> 
> In this regex:
> - `abc` matches the characters abc
> - `(?!.*\|)` is a negative lookahead, asserting that what immediately follows is not any character (0 or more times) before a `|`. 
> 
> Here's how you might use this in Python:
> 
> ```python
> import re
> 
> strings_to_test = ['abc', 'abc|def']
> 
> for str in strings_to_test:
>     if re.match('abc(?!.*\|)', str):
>         print('"abc" found without "|" following in: ' + str)
>     else:
>         print('"|" found after "abc" in: ' + str)
> ```
> 
> This script would output:
> 
> ```
> "abc" found without "|" following in: abc
> "|" found after "abc" in: abc|def
> ```
> 
> The regular expression will only return a match when there is no '|' ahead in the strings being tested. 
> 
> Adapt this regex expression to fit your needs by replacing `abc` with your own expression.
