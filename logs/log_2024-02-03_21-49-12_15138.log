**assistant**:
> Below are selected log entries of past conversations, as part of an experimental AI memory system. They may have no bearing on the chat.
> 
> 
>   2024-02-03:
>   Understanding jQuery's `.each()` and Promise handling with Arachne
> 
> 
> 
>   2024-02-03:
>   Handling Promises in jQuery's .each Method
> 
> 
> 
>   2024-02-02:
>   Removing Items from jQuery Children List
> 
> 
> 
>   2024-02-02:
>   Wrapping AJAX Returned HTML in a `ul` Tag Using jQuery
> 
> 
> 
>   2024-02-03:
>   Web Development Queries: jQuery Guidance
> 
> 
> 
>   2024-02-02:
>   Iterating over children in jQuery with Arachne
> 
> 
> 
>   2023-07-21:
>   James inquired about creating a flexible function in Julia, similar to Python's `map`; Arachne provided initial and revised code examples to match desired functionality.
> 
> 
> 
>   2023-08-20:
>   James asked how to return HTML composed of a list of items in Flask; Arachne provided an example using the `render_template()` function with a `for` loop in Jinja2.
> 
> 
> 
>   2024-02-02:
>   Wrapping AJAX-Returned HTML in `ul` Tag with jQuery
> 
> 
> 
>   2023-05-05:
>   How to create a sequence in Julia like R's `seq()`; Use `range()` function with `start`, `stop`, and `length` args to create desired sequence.
> 
> 
>     
**user**:
> What is returned by jquery's `.each` applied to a list of jquery DOM elements, where the function returns a promise? Is it a list of DOMs again, or a list of promises?
**assistant**:
> When you use jQuery's `.each()` method on a list of DOM elements, the return value isn't a reflection of the DOM elements or any values returned by the function provided to `.each()`. Even if a promise is returned within the function, `.each()` still returns the original jQuery collection it was invoked on. 
> 
> This allows for chainability of other jQuery methods on the same collection. This could be misleading if you're used to Javascript's `Array.prototype.map` or `Array.prototype.forEach`, which respect return values from the provided function.
> 
> To return a list of promises, you might want to use jQuery's `$.map` method or JavaScript `Array.prototype.map` instead. The approach with JavaScript `Array.prototype.map` looks like this:
> 
> ```javascript
> let promises = $(selector).toArray().map(domElement => doSomething(domElement));
> ```
> In the example above, `doSomething(domElement)` should return a Promise. You now have an array of Promises in variable `promises`, and you can use `Promise.all(promises)` to wait for all to resolve or any to reject. 
> 
> Be aware that using JavaScript's native `Array.prototype.map` function on a jQuery object will not work directly because jQuery objects are not true JavaScript arrays. Hence the need for using `.toArray()` to convert the jQuery object to a standard JavaScript array.
