**assistant**:
> Below are selected log entries of past conversations, as part of an experimental AI memory system. They may have no bearing on the chat.
> 
>     
**user**:
> Suppose I have an exam with 100 questions, and the chance of getting each question right is 80%. How many questions will I randomly get >50% of the students getting the wrong answer?
**assistant**:
> The set-up describes a binomial distribution, which models the number of successes (correct answers) in a fixed number of independent Bernoulli trials (questions) with the same probability of success (getting a question right). 
> 
> Let's denote the number of questions as N = 100 and the probability of getting a question right as p = 0.80. Consequently, the complement, the probability of getting a question wrong is q = 1 - p = 0.20.
> 
> If we have 50% of students getting a question wrong, that means that over 50% of the answers must be incorrect. The binomial probability tells us the probability of getting exactly k successes (incorrect answers, in this case) in N Bernoulli trials:
> 
> P(k; N, q) = C(N, k) * (q^k) * ((1-q)^(N-k))
> 
> where C(N, k) denotes the number of combinations of N items taken k at a time.
> 
> We want to find K such that:
> 
> P(K-1; N, q) <= 0.50
> and 
> P(K; N, q) > 0.50
> 
> In other words, we want to find the smallest number of incorrect answers such that randomly 50% students or more get the wrong answer.
> 
> This essentially involves finding the median of a binomial distribution, which can get cumbersome to calculate by hand for large numbers because direct calculations require summing probabilities and calculating combinations. 
> 
> Would you like me to use a statistical software or programming language like Python to solve this numerically?
**user**:
> Sure. Can I use R?
**assistant**:
> Absolutely! R is a great choice for statistical calculations. Here's an example of how you can use R to calculate the number of questions you'll randomly get more than 50% of the students getting wrong:
> 
> ```R
> # Set the number of questions and the probability of getting a question right
> N <- 100
> p <- 0.80
> 
> # Calculate the number of incorrect answers required
> K <- 0
> while (sum(dbinom(K:N, N, 1-p)) <= 0.50) {
>   K <- K + 1
> }
> 
> K
> ```
> 
> This code uses a `while` loop to increment the number of incorrect answers (`K`) until the sum of the probabilities of getting K or more incorrect answers is greater than 0.50. The final value of `K` will be the number of questions you'll randomly get more than 50% of the students getting wrong.
> 
> Simply copy and paste this code into your R environment, and it will give you the desired result.
