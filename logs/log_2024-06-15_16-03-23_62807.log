**assistant**:
> Below are selected log entries of past conversations, as part of an experimental AI memory system. T
**user**:
> [vps50862]$ find . -print -exec cat {} \; -printf "\n=====\n"
> .
> cat: .: Is a directory
> ./vendor
> cat: ./vendor: Is a directory
> ./vendor/plugins
> cat: ./vendor/plugins: Is a directory
> ./db
> cat: ./db: Is a directory
> ./db/migrate
> cat: ./db/migrate: Is a directory
> ./db/migrate/20091008033339_create_companies.rb
> class CreateCompanies < ActiveRecord::Migration
>   def self.up
>     create_table :companies do |t|
>       t.string :name
>       t.float :ecojust
>       t.float :socjust
>       t.float :environ
>       t.float :educate
>       t.text :notes
>       t.datetime :date_created
> 
>       t.timestamps
>     end
>   end
> 
>   def self.down
>     drop_table :companies
>   end
> end
> 
> =====
> ./db/migrate/20100424214035_create_namings.rb
> class CreateNamings < ActiveRecord::Migration
>   def self.up
>     create_table :namings do |t|
> 
>       t.timestamps
>     end
>   end
> 
>   def self.down
>     drop_table :namings
>   end
> end
> 
> =====
> ./db/migrate/20100424215804_create_offerings.rb
> class CreateOfferings < ActiveRecord::Migration
>   def self.up
>     create_table :offerings do |t|
> 
>       t.timestamps
>     end
>   end
> 
>   def self.down
>     drop_table :offerings
>   end
> end
> 
> =====
> ./todo.txt
> TODO:
> 	Add scaffold for inputting companies
> 	Add user accounts for recording dollars spent in each
> =====
> ./public
> cat: ./public: Is a directory
> ./public/422.html
> <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
>        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
> 
> <html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
> 
> <head>
>   <meta http-equiv="content-type" content="text/html; charset=UTF-8" />
>   <title>The change you wanted was rejected (422)</title>
> 	<style type="text/css">
> 		body { background-color: #fff; color: #666; text-align: center; font-family: arial, sans-serif; }
> 		div.dialog {
> 			width: 25em;
> 			padding: 0 4em;
> 			margin: 4em auto 0 auto;
> 			border: 1px solid #ccc;
> 			border-right-color: #999;
> 			border-bottom-color: #999;
> 		}
> 		h1 { font-size: 100%; color: #f00; line-height: 1.5em; }
> 	</style>
> </head>
> 
> <body>
>   <!-- This file lives in public/422.html -->
>   <div class="dialog">
>     <h1>The change you wanted was rejected.</h1>
>     <p>Maybe you tried to change something you didn't have access to.</p>
>   </div>
> </body>
> </html>
> =====
> ./public/robots.txt
> # See http://www.robotstxt.org/wc/norobots.html for documentation on how to use the robots.txt file
> #
> # To ban all spiders from the entire site uncomment the next two lines:
> # User-Agent: *
> # Disallow: /
> 
> =====
> ./public/dispatch.cgi
> #!/usr/bin/ruby1.8
> 
> require File.dirname(__FILE__) + "/../config/environment" unless defined?(RAILS_ROOT)
> 
> # If you're using RubyGems and mod_ruby, this require should be changed to an absolute path one, like:
> # "/usr/local/lib/ruby/gems/1.8/gems/rails-0.8.0/lib/dispatcher" -- otherwise performance is severely impaired
> require "dispatcher"
> 
> ADDITIONAL_LOAD_PATHS.reverse.each { |dir| $:.unshift(dir) if File.directory?(dir) } if defined?(Apache::RubyRun)
> Dispatcher.dispatch
> 
> =====
> ./public/404.html
> <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
>        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
> 
> <html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
> 
> <head>
>   <meta http-equiv="content-type" content="text/html; charset=UTF-8" />
>   <title>The page you were looking for doesn't exist (404)</title>
> 	<style type="text/css">
> 		body { background-color: #fff; color: #666; text-align: center; font-family: arial, sans-serif; }
> 		div.dialog {
> 			width: 25em;
> 			padding: 0 4em;
> 			margin: 4em auto 0 auto;
> 			border: 1px solid #ccc;
> 			border-right-color: #999;
> 			border-bottom-color: #999;
> 		}
> 		h1 { font-size: 100%; color: #f00; line-height: 1.5em; }
> 	</style>
> </head>
> 
> <body>
>   <!-- This file lives in public/404.html -->
>   <div class="dialog">
>     <h1>The page you were looking for doesn't exist.</h1>
>     <p>You may have mistyped the address or the page may have moved.</p>
>   </div>
> </body>
> </html>
> =====
> ./public/stylesheets
> cat: ./public/stylesheets: Is a directory
> ./public/stylesheets/base.css
> body { background-color: #fff; color: #333; }
> 
> .inputtext_304 {
> 	width: 304px;
> 	height: 50px;
> 	background: url(/images/inputtext_304.png) no-repeat;
> }
> 
> .inputtext_304 input {
> 	width: 290px;
> 	height: 40px;
> 	background: none;
> 	border: none;
> 	color: #000000;
> 	margin-top: 3px;
> 	margin-left: 8px;
> 	margin-right: 8px;
> 	font-size: 22px;
> }
> 
> .inputtext_162 {
> 	width: 162px;
> 	height: 50px;
> 	background: url(/images/inputtext_162.png) no-repeat;
> }
> 
> .inputtext_162 input {
> 	width: 150px;
> 	height: 40px;
> 	background: none;
> 	border: none;
> 	color: #000000;
> 	margin-top: 3px;
> 	margin-left: 8px;
> 	margin-right: 8px;
> 	font-size: 22px;
> }
> 
> label {
> 	font-size: 18px;
> 	font-weight: bold;
> }
> =====
> ./public/favicon.ico
> 
> =====
> ./public/500.html
> <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
>        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
> 
> <html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
> 
> <head>
>   <meta http-equiv="content-type" content="text/html; charset=UTF-8" />
>   <title>We're sorry, but something went wrong (500)</title>
> 	<style type="text/css">
> 		body { background-color: #fff; color: #666; text-align: center; font-family: arial, sans-serif; }
> 		div.dialog {
> 			width: 25em;
> 			padding: 0 4em;
> 			margin: 4em auto 0 auto;
> 			border: 1px solid #ccc;
> 			border-right-color: #999;
> 			border-bottom-color: #999;
> 		}
> 		h1 { font-size: 100%; color: #f00; line-height: 1.5em; }
> 	</style>
> </head>
> 
> <body>
>   <!-- This file lives in public/500.html -->
>   <div class="dialog">
>     <h1>We're sorry, but something went wrong.</h1>
>     <p>We've been notified about this issue and we'll take a look at it shortly.</p>
>     <p><small>(If you're the administrator of this website, then please read
>     the log file "<%=h RAILS_ENV %>.log"
>     to find out what went wrong.)</small></p>
>   </div>
> </body>
> </html>
> 
> =====
> ./public/favicon.gif
> 
> =====
> ./public/rails.html
> <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
>         "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
> <html>
>   <head>
>     <meta http-equiv="Content-type" content="text/html; charset=utf-8" />
>     <title>Ruby on Rails: Welcome aboard</title>
>     <style type="text/css" media="screen">
>       body {
>         margin: 0;
>         margin-bottom: 25px;
>         padding: 0;
>         background-color: #f0f0f0;
>         font-family: "Lucida Grande", "Bitstream Vera Sans", "Verdana";
>         font-size: 13px;
>         color: #333;
>       }
>       
>       h1 {
>         font-size: 28px;
>         color: #000;
>       }
>       
>       a  {color: #03c}
>       a:hover {
>         background-color: #03c;
>         color: white;
>         text-decoration: none;
>       }
>       
>       
>       #page {
>         background-color: #f0f0f0;
>         width: 750px;
>         margin: 0;
>         margin-left: auto;
>         margin-right: auto;
>       }
>       
>       #content {
>         float: left;
>         background-color: white;
>         border: 3px solid #aaa;
>         border-top: none;
>         padding: 25px;
>         width: 500px;
>       }
>       
>       #sidebar {
>         float: right;
>         width: 175px;
>       }
> 
>       #footer {
>         clear: both;
>       }
>       
> 
>       #header, #about, #getting-started {
>         padding-left: 75px;
>         padding-right: 30px;
>       }
> 
> 
>       #header {
>         background-image: url("images/rails.png");
>         background-repeat: no-repeat;
>         background-position: top left;
>         height: 64px;
>       }
>       #header h1, #header h2 {margin: 0}
>       #header h2 {
>         color: #888;
>         font-weight: normal;
>         font-size: 16px;
>       }
>       
>       
>       #about h3 {
>         margin: 0;
>         margin-bottom: 10px;
>         font-size: 14px;
>       }
>       
>       #about-content {
>         background-color: #ffd;
>         border: 1px solid #fc0;
>         margin-left: -11px;
>       }
>       #about-content table {
>         margin-top: 10px;
>         margin-bottom: 10px;
>         font-size: 11px;
>         border-collapse: collapse;
>       }
>       #about-content td {
>         padding: 10px;
>         padding-top: 3px;
>         padding-bottom: 3px;
>       }
>       #about-content td.name  {color: #555}
>       #about-content td.value {color: #000}
>       
>       #about-content.failure {
>         background-color: #fcc;
>         border: 1px solid #f00;
>       }
>       #about-content.failure p {
>         margin: 0;
>         padding: 10px;
>       }
>       
>       
>       #getting-started {
>         border-top: 1px solid #ccc;
>         margin-top: 25px;
>         padding-top: 15px;
>       }
>       #getting-started h1 {
>         margin: 0;
>         font-size: 20px;
>       }
>       #getting-started h2 {
>         margin: 0;
>         font-size: 14px;
>         font-weight: normal;
>         color: #333;
>         margin-bottom: 25px;
>       }
>       #getting-started ol {
>         margin-left: 0;
>         padding-left: 0;
>       }
>       #getting-started li {
>         font-size: 18px;
>         color: #888;
>         margin-bottom: 25px;
>       }
>       #getting-started li h2 {
>         margin: 0;
>         font-weight: normal;
>         font-size: 18px;
>         color: #333;
>       }
>       #getting-started li p {
>         color: #555;
>         font-size: 13px;
>       }
>       
>       
>       #search {
>         margin: 0;
>         padding-top: 10px;
>         padding-bottom: 10px;
>         font-size: 11px;
>       }
>       #search input {
>         font-size: 11px;
>         margin: 2px;
>       }
>       #search-text {width: 170px}
>       
>       
>       #sidebar ul {
>         margin-left: 0;
>         padding-left: 0;
>       }
>       #sidebar ul h3 {
>         margin-top: 25px;
>         font-size: 16px;
>         padding-bottom: 10px;
>         border-bottom: 1px solid #ccc;
>       }
>       #sidebar li {
>         list-style-type: none;
>       }
>       #sidebar ul.links li {
>         margin-bottom: 5px;
>       }
>       
>     </style>
>     <script type="text/javascript" src="javascripts/prototype.js"></script>
>     <script type="text/javascript" src="javascripts/effects.js"></script>
>     <script type="text/javascript">
>       function about() {
>         if (Element.empty('about-content')) {
>           new Ajax.Updater('about-content', 'rails/info/properties', {
>             method:     'get',
>             onFailure:  function() {Element.classNames('about-content').add('failure')},
>             onComplete: function() {new Effect.BlindDown('about-content', {duration: 0.25})}
>           });
>         } else {
>           new Effect[Element.visible('about-content') ? 
>             'BlindUp' : 'BlindDown']('about-content', {duration: 0.25});
>         }
>       }
>       
>       window.onload = function() {
>         $('search-text').value = '';
>         $('search').onsubmit = function() {
>           $('search-text').value = 'site:rubyonrails.org ' + $F('search-text');
>         }
>       }
>     </script>
>   </head>
>   <body>
>     <div id="page">
>       <div id="sidebar">
>         <ul id="sidebar-items">
>           <li>
>             <form id="search" action="http://www.google.com/search" method="get">
>               <input type="hidden" name="hl" value="en" />
>               <input type="text" id="search-text" name="q" value="site:rubyonrails.org " />
>               <input type="submit" value="Search" /> the Rails site
>             </form>
>           </li>
>         
>           <li>
>             <h3>Join the community</h3>
>             <ul class="links">
>               <li><a href="http://www.rubyonrails.org/">Ruby on Rails</a></li>
>               <li><a href="http://weblog.rubyonrails.org/">Official weblog</a></li>
>               <li><a href="http://wiki.rubyonrails.org/">Wiki</a></li>
>             </ul>
>           </li>
>           
>           <li>
>             <h3>Browse the documentation</h3>
>             <ul class="links">
>               <li><a href="http://api.rubyonrails.org/">Rails API</a></li>
>               <li><a href="http://stdlib.rubyonrails.org/">Ruby standard library</a></li>
>               <li><a href="http://corelib.rubyonrails.org/">Ruby core</a></li>
>             </ul>
>           </li>
>         </ul>
>       </div>
> 
>       <div id="content">
>         <div id="header">
>           <h1>Welcome aboard</h1>
>           <h2>You&rsquo;re riding Ruby on Rails!</h2>
>         </div>
> 
>         <div id="about">
>           <h3><a href="rails/info/properties" onclick="about(); return false">About your application&rsquo;s environment</a></h3>
>           <div id="about-content" style="display: none"></div>
>         </div>
>         
>         <div id="getting-started">
>           <h1>Getting started</h1>
>           <h2>Here&rsquo;s how to get rolling:</h2>
>           
>           <ol>          
>             <li>
>               <h2>Use <tt>script/generate</tt> to create your models and controllers</h2>
>               <p>To see all available options, run it without parameters.</p>
>             </li>
>             
>             <li>
>               <h2>Set up a default route and remove or rename this file</h2>
>               <p>Routes are set up in config/routes.rb.</p>
>             </li>
> 
>             <li>
>               <h2>Create your database</h2>
>               <p>Run <tt>rake db:migrate</tt> to create your database. If you're not using SQLite (the default), edit <tt>config/database.yml</tt> with your username and password.</p>
>             </li>
>           </ol>
>         </div>
>       </div>
>       
>       <div id="footer">&nbsp;</div>
>     </div>
>   </body>
> </html>
> =====
> ./public/dispatch.fcgi
> #!/usr/bin/ruby1.8
> #
> # You may specify the path to the FastCGI crash log (a log of unhandled
> # exceptions which forced the FastCGI instance to exit, great for debugging)
> # and the number of requests to process before running garbage collection.
> #
> # By default, the FastCGI crash log is RAILS_ROOT/log/fastcgi.crash.log
> # and the GC period is nil (turned off).  A reasonable number of requests
> # could range from 10-100 depending on the memory footprint of your app.
> #
> # Example:
> #   # Default log path, normal GC behavior.
> #   RailsFCGIHandler.process!
> #
> #   # Default log path, 50 requests between GC.
> #   RailsFCGIHandler.process! nil, 50
> #
> #   # Custom log path, normal GC behavior.
> #   RailsFCGIHandler.process! '/var/log/myapp_fcgi_crash.log'
> #
> require File.dirname(__FILE__) + "/../config/environment"
> require 'fcgi_handler'
> 
> RailsFCGIHandler.process!
> 
> =====
> ./public/dispatch.rb
> #!/usr/bin/ruby1.8
> 
> require File.dirname(__FILE__) + "/../config/environment" unless defined?(RAILS_ROOT)
> 
> # If you're using RubyGems and mod_ruby, this require should be changed to an absolute path one, like:
> # "/usr/local/lib/ruby/gems/1.8/gems/rails-0.8.0/lib/dispatcher" -- otherwise performance is severely impaired
> require "dispatcher"
> 
> ADDITIONAL_LOAD_PATHS.reverse.each { |dir| $:.unshift(dir) if File.directory?(dir) } if defined?(Apache::RubyRun)
> Dispatcher.dispatch
> 
> =====
> ./lib
> cat: ./lib: Is a directory
> ./lib/tasks
> cat: ./lib/tasks: Is a directory
> ./test
> cat: ./test: Is a directory
> ./test/integration
> cat: ./test/integration: Is a directory
> ./test/fixtures
> cat: ./test/fixtures: Is a directory
> ./test/fixtures/namings.yml
> # Read about fixtures at http://ar.rubyonrails.org/classes/Fixtures.html
> 
> # one:
> #   column: value
> #
> # two:
> #   column: value
> 
> =====
> ./test/fixtures/companies.yml
> # Read about fixtures at http://ar.rubyonrails.org/classes/Fixtures.html
> 
> one:
>   name: MyString
>   ecojust: 1.5
>   socjust: 1.5
>   environ: 1.5
>   educate: 1.5
>   notes: MyText
>   date_created: 2009-10-07 20:33:39
> 
> two:
>   name: MyString
>   ecojust: 1.5
>   socjust: 1.5
>   environ: 1.5
>   educate: 1.5
>   notes: MyText
>   date_created: 2009-10-07 20:33:39
> 
> =====
> ./test/fixtures/offerings.yml
> # Read about fixtures at http://ar.rubyonrails.org/classes/Fixtures.html
> 
> # one:
> #   column: value
> #
> # two:
> #   column: value
> 
> =====
> ./test/unit
> cat: ./test/unit: Is a directory
> ./test/unit/offering_test.rb
> require 'test_helper'
> 
> class OfferingTest < ActiveSupport::TestCase
>   # Replace this with your real tests.
>   test "the truth" do
>     assert true
>   end
> end
> 
> =====
> ./test/unit/naming_test.rb
> require 'test_helper'
> 
> class NamingTest < ActiveSupport::TestCase
>   # Replace this with your real tests.
>   test "the truth" do
>     assert true
>   end
> end
> 
> =====
> ./test/unit/company_test.rb
> require 'test_helper'
> 
> class CompanyTest < ActiveSupport::TestCase
>   # Replace this with your real tests.
>   test "the truth" do
>     assert true
>   end
> end
> 
> =====
> ./test/functional
> cat: ./test/functional: Is a directory
> ./test/functional/companies_controller_test.rb
> require 'test_helper'
> 
> class CompaniesControllerTest < ActionController::TestCase
>   test "should get index" do
>     get :index
>     assert_response :success
>     assert_not_nil assigns(:companies)
>   end
> 
>   test "should get new" do
>     get :new
>     assert_response :success
>   end
> 
>   test "should create company" do
>     assert_difference('Company.count') do
>       post :create, :company => { }
>     end
> 
>     assert_redirected_to company_path(assigns(:company))
>   end
> 
>   test "should show company" do
>     get :show, :id => companies(:one).id
>     assert_response :success
>   end
> 
>   test "should get edit" do
>     get :edit, :id => companies(:one).id
>     assert_response :success
>   end
> 
>   test "should update company" do
>     put :update, :id => companies(:one).id, :company => { }
>     assert_redirected_to company_path(assigns(:company))
>   end
> 
>   test "should destroy company" do
>     assert_difference('Company.count', -1) do
>       delete :destroy, :id => companies(:one).id
>     end
> 
>     assert_redirected_to companies_path
>   end
> end
> 
> =====
> ./test/functional/splash_controller_test.rb
> require 'test_helper'
> 
> class SplashControllerTest < ActionController::TestCase
>   # Replace this with your real tests.
>   test "the truth" do
>     assert true
>   end
> end
> 
> =====
> ./test/performance
> cat: ./test/performance: Is a directory
> ./test/performance/browsing_test.rb
> require 'test_helper'
> require 'performance_test_help'
> 
> # Profiling results for each test method are written to tmp/performance.
> class BrowsingTest < ActionController::PerformanceTest
>   def test_homepage
>     get '/'
>   end
> end
> 
> =====
> ./test/test_helper.rb
> ENV["RAILS_ENV"] = "test"
> require File.expand_path(File.dirname(__FILE__) + "/../config/environment")
> require 'test_help'
> 
> class Test::Unit::TestCase
>   # Transactional fixtures accelerate your tests by wrapping each test method
>   # in a transaction that's rolled back on completion.  This ensures that the
>   # test database remains unchanged so your fixtures don't have to be reloaded
>   # between every test method.  Fewer database queries means faster tests.
>   #
>   # Read Mike Clark's excellent walkthrough at
>   #   http://clarkware.com/cgi/blosxom/2005/10/24#Rails10FastTesting
>   #
>   # Every Active Record database supports transactions except MyISAM tables
>   # in MySQL.  Turn off transactional fixtures in this case; however, if you
>   # don't care one way or the other, switching from MyISAM to InnoDB tables
>   # is recommended.
>   #
>   # The only drawback to using transactional fixtures is when you actually 
>   # need to test transactions.  Since your test is bracketed by a transaction,
>   # any transactions started in your code will be automatically rolled back.
>   self.use_transactional_fixtures = true
> 
>   # Instantiated fixtures are slow, but give you @david where otherwise you
>   # would need people(:david).  If you don't want to migrate your existing
>   # test cases which use the @david style and don't mind the speed hit (each
>   # instantiated fixtures translates to a database query per test method),
>   # then set this back to true.
>   self.use_instantiated_fixtures  = false
> 
>   # Setup all fixtures in test/fixtures/*.(yml|csv) for all tests in alphabetical order.
>   #
>   # Note: You'll currently still have to declare fixtures explicitly in integration tests
>   # -- they do not yet inherit this setting
>   fixtures :all
> 
>   # Add more helper methods to be used by all tests here...
> end
> 
> =====
> ./README
> == Welcome to Rails
> 
> Rails is a web-application framework that includes everything needed to create 
> database-backed web applications according to the Model-View-Control pattern. 
> 
> This pattern splits the view (also called the presentation) into "dumb" templates
> that are primarily responsible for inserting pre-built data in between HTML tags.
> The model contains the "smart" domain objects (such as Account, Product, Person,
> Post) that holds all the business logic and knows how to persist themselves to
> a database. The controller handles the incoming requests (such as Save New Account,
> Update Product, Show Post) by manipulating the model and directing data to the view.
> 
> In Rails, the model is handled by what's called an object-relational mapping
> layer entitled Active Record. This layer allows you to present the data from
> database rows as objects and embellish these data objects with business logic
> methods. You can read more about Active Record in
> link:files/vendor/rails/activerecord/README.html.
> 
> The controller and view are handled by the Action Pack, which handles both
> layers by its two parts: Action View and Action Controller. These two layers
> are bundled in a single package due to their heavy interdependence. This is
> unlike the relationship between the Active Record and Action Pack that is much
> more separate. Each of these packages can be used independently outside of
> Rails.  You can read more about Action Pack in
> link:files/vendor/rails/actionpack/README.html.
> 
> 
> == Getting Started
> 
> 1. At the command prompt, start a new Rails application using the <tt>rails</tt> command
>    and your application name. Ex: rails myapp
> 2. Change directory into myapp and start the web server: <tt>script/server</tt> (run with --help for options)
> 3. Go to http://localhost:3000/ and get "Welcome aboard: You're riding the Rails!"
> 4. Follow the guidelines to start developing your application
> 
> 
> == Web Servers
> 
> By default, Rails will try to use Mongrel and lighttpd if they are installed, otherwise
> Rails will use WEBrick, the webserver that ships with Ruby. When you run script/server,
> Rails will check if Mongrel exists, then lighttpd and finally fall back to WEBrick. This ensures
> that you can always get up and running quickly.
> 
> Mongrel is a Ruby-based webserver with a C component (which requires compilation) that is
> suitable for development and deployment of Rails applications. If you have Ruby Gems installed,
> getting up and running with mongrel is as easy as: <tt>gem install mongrel</tt>.
> More info at: http://mongrel.rubyforge.org
> 
> If Mongrel is not installed, Rails will look for lighttpd. It's considerably faster than
> Mongrel and WEBrick and also suited for production use, but requires additional
> installation and currently only works well on OS X/Unix (Windows users are encouraged
> to start with Mongrel). We recommend version 1.4.11 and higher. You can download it from
> http://www.lighttpd.net.
> 
> And finally, if neither Mongrel or lighttpd are installed, Rails will use the built-in Ruby
> web server, WEBrick. WEBrick is a small Ruby web server suitable for development, but not
> for production.
> 
> But of course its also possible to run Rails on any platform that supports FCGI.
> Apache, LiteSpeed, IIS are just a few. For more information on FCGI,
> please visit: http://wiki.rubyonrails.com/rails/pages/FastCGI
> 
> 
> == Apache .htaccess example
> 
> # General Apache options
> AddHandler fastcgi-script .fcgi
> AddHandler cgi-script .cgi
> Options +FollowSymLinks +ExecCGI
> 
> # If you don't want Rails to look in certain directories,
> # use the following rewrite rules so that Apache won't rewrite certain requests
> # 
> # Example:
> #   RewriteCond %{REQUEST_URI} ^/notrails.*
> #   RewriteRule .* - [L]
> 
> # Redirect all requests not available on the filesystem to Rails
> # By default the cgi dispatcher is used which is very slow
> # 
> # For better performance replace the dispatcher with the fastcgi one
> #
> # Example:
> #   RewriteRule ^(.*)$ dispatch.fcgi [QSA,L]
> RewriteEngine On
> 
> # If your Rails application is accessed via an Alias directive,
> # then you MUST also set the RewriteBase in this htaccess file.
> #
> # Example:
> #   Alias /myrailsapp /path/to/myrailsapp/public
> #   RewriteBase /myrailsapp
> 
> RewriteRule ^$ index.html [QSA]
> RewriteRule ^([^.]+)$ $1.html [QSA]
> RewriteCond %{REQUEST_FILENAME} !-f
> RewriteRule ^(.*)$ dispatch.cgi [QSA,L]
> 
> # In case Rails experiences terminal errors
> # Instead of displaying this message you can supply a file here which will be rendered instead
> # 
> # Example:
> #   ErrorDocument 500 /500.html
> 
> ErrorDocument 500 "<h2>Application error</h2>Rails application failed to start properly"
> 
> 
> == Debugging Rails
> 
> Sometimes your application goes wrong.  Fortunately there are a lot of tools that
> will help you debug it and get it back on the rails.
> 
> First area to check is the application log files.  Have "tail -f" commands running
> on the server.log and development.log. Rails will automatically display debugging
> and runtime information to these files. Debugging info will also be shown in the
> browser on requests from 127.0.0.1.
> 
> You can also log your own messages directly into the log file from your code using
> the Ruby logger class from inside your controllers. Example:
> 
>   class WeblogController < ActionController::Base
>     def destroy
>       @weblog = Weblog.find(params[:id])
>       @weblog.destroy
>       logger.info("#{Time.now} Destroyed Weblog ID ##{@weblog.id}!")
>     end
>   end
> 
> The result will be a message in your log file along the lines of:
> 
>   Mon Oct 08 14:22:29 +1000 2007 Destroyed Weblog ID #1
> 
> More information on how to use the logger is at http://www.ruby-doc.org/core/
> 
> Also, Ruby documentation can be found at http://www.ruby-lang.org/ including:
> 
> * The Learning Ruby (Pickaxe) Book: http://www.ruby-doc.org/docs/ProgrammingRuby/
> * Learn to Program: http://pine.fm/LearnToProgram/  (a beginners guide)
> 
> These two online (and free) books will bring you up to speed on the Ruby language
> and also on programming in general.
> 
> 
> == Debugger
> 
> Debugger support is available through the debugger command when you start your Mongrel or
> Webrick server with --debugger. This means that you can break out of execution at any point
> in the code, investigate and change the model, AND then resume execution! 
> You need to install ruby-debug to run the server in debugging mode. With gems, use 'gem install ruby-debug'
> Example:
> 
>   class WeblogController < ActionController::Base
>     def index
>       @posts = Post.find(:all)
>       debugger
>     end
>   end
> 
> So the controller will accept the action, run the first line, then present you
> with a IRB prompt in the server window. Here you can do things like:
> 
>   >> @posts.inspect
>   => "[#<Post:0x14a6be8 @attributes={\"title\"=>nil, \"body\"=>nil, \"id\"=>\"1\"}>,
>        #<Post:0x14a6620 @attributes={\"title\"=>\"Rails you know!\", \"body\"=>\"Only ten..\", \"id\"=>\"2\"}>]"
>   >> @posts.first.title = "hello from a debugger"
>   => "hello from a debugger"
> 
> ...and even better is that you can examine how your runtime objects actually work:
> 
>   >> f = @posts.first
>   => #<Post:0x13630c4 @attributes={"title"=>nil, "body"=>nil, "id"=>"1"}>
>   >> f.
>   Display all 152 possibilities? (y or n)
> 
> Finally, when you're ready to resume execution, you enter "cont"
> 
> 
> == Console
> 
> You can interact with the domain model by starting the console through <tt>script/console</tt>.
> Here you'll have all parts of the application configured, just like it is when the
> application is running. You can inspect domain models, change values, and save to the
> database. Starting the script without arguments will launch it in the development environment.
> Passing an argument will specify a different environment, like <tt>script/console production</tt>.
> 
> To reload your controllers and models after launching the console run <tt>reload!</tt>
> 
> == dbconsole
> 
> You can go to the command line of your database directly through <tt>script/dbconsole</tt>.
> You would be connected to the database with the credentials defined in database.yml.
> Starting the script without arguments will connect you to the development database. Passing an
> argument will connect you to a different database, like <tt>script/dbconsole production</tt>.
> Currently works for mysql, postgresql and sqlite.
> 
> == Description of Contents
> 
> app
>   Holds all the code that's specific to this particular application.
> 
> app/controllers
>   Holds controllers that should be named like weblogs_controller.rb for
>   automated URL mapping. All controllers should descend from ApplicationController
>   which itself descends from ActionController::Base.
> 
> app/models
>   Holds models that should be named like post.rb.
>   Most models will descend from ActiveRecord::Base.
> 
> app/views
>   Holds the template files for the view that should be named like
>   weblogs/index.html.erb for the WeblogsController#index action. All views use eRuby
>   syntax.
> 
> app/views/layouts
>   Holds the template files for layouts to be used with views. This models the common
>   header/footer method of wrapping views. In your views, define a layout using the
>   <tt>layout :default</tt> and create a file named default.html.erb. Inside default.html.erb,
>   call <% yield %> to render the view using this layout.
> 
> app/helpers
>   Holds view helpers that should be named like weblogs_helper.rb. These are generated
>   for you automatically when using script/generate for controllers. Helpers can be used to
>   wrap functionality for your views into methods.
> 
> config
>   Configuration files for the Rails environment, the routing map, the database, and other dependencies.
> 
> db
>   Contains the database schema in schema.rb.  db/migrate contains all
>   the sequence of Migrations for your schema.
> 
> doc
>   This directory is where your application documentation will be stored when generated
>   using <tt>rake doc:app</tt>
> 
> lib
>   Application specific libraries. Basically, any kind of custom code that doesn't
>   belong under controllers, models, or helpers. This directory is in the load path.
> 
> public
>   The directory available for the web server. Contains subdirectories for images, stylesheets,
>   and javascripts. Also contains the dispatchers and the default HTML files. This should be
>   set as the DOCUMENT_ROOT of your web server.
> 
> script
>   Helper scripts for automation and generation.
> 
> test
>   Unit and functional tests along with fixtures. When using the script/generate scripts, template
>   test files will be generated for you and placed in this directory.
> 
> vendor
>   External libraries that the application depends on. Also includes the plugins subdirectory.
>   If the app has frozen rails, those gems also go here, under vendor/rails/.
>   This directory is in the load path.
> 
> =====
> ./script
> cat: ./script: Is a directory
> ./script/runner
> #!/usr/bin/env ruby
> require File.dirname(__FILE__) + '/../config/boot'
> require 'commands/runner'
> 
> =====
> ./script/dbconsole
> #!/usr/bin/env ruby
> require File.dirname(__FILE__) + '/../config/boot'
> require 'commands/dbconsole'
> 
> =====
> ./script/process
> cat: ./script/process: Is a directory
> ./script/process/spawner
> #!/usr/bin/env ruby
> require File.dirname(__FILE__) + '/../../config/boot'
> require 'commands/process/spawner'
> 
> =====
> ./script/process/reaper
> #!/usr/bin/env ruby
> require File.dirname(__FILE__) + '/../../config/boot'
> require 'commands/process/reaper'
> 
> =====
> ./script/process/inspector
> #!/usr/bin/env ruby
> require File.dirname(__FILE__) + '/../../config/boot'
> require 'commands/process/inspector'
> 
> =====
> ./script/destroy
> #!/usr/bin/env ruby
> require File.dirname(__FILE__) + '/../config/boot'
> require 'commands/destroy'
> 
> =====
> ./script/generate
> #!/usr/bin/env ruby
> require File.dirname(__FILE__) + '/../config/boot'
> require 'commands/generate'
> 
> =====
> ./script/performance
> cat: ./script/performance: Is a directory
> ./script/performance/profiler
> #!/usr/bin/env ruby
> require File.dirname(__FILE__) + '/../../config/boot'
> require 'commands/performance/profiler'
> 
> =====
> ./script/performance/request
> #!/usr/bin/env ruby
> require File.dirname(__FILE__) + '/../../config/boot'
> require 'commands/performance/request'
> 
> =====
> ./script/performance/benchmarker
> #!/usr/bin/env ruby
> require File.dirname(__FILE__) + '/../../config/boot'
> require 'commands/performance/benchmarker'
> 
> =====
> ./script/server
> #!/usr/bin/env ruby
> require File.dirname(__FILE__) + '/../config/boot'
> require 'commands/server'
> 
> =====
> ./script/console
> #!/usr/bin/env ruby
> require File.dirname(__FILE__) + '/../config/boot'
> require 'commands/console'
> 
> =====
> ./script/about
> #!/usr/bin/env ruby
> require File.dirname(__FILE__) + '/../config/boot'
> $LOAD_PATH.unshift "#{RAILTIES_PATH}/builtin/rails_info"
> require 'commands/about'
> =====
> ./script/plugin
> #!/usr/bin/env ruby
> require File.dirname(__FILE__) + '/../config/boot'
> require 'commands/plugin'
> 
> =====
> ./tmp
> cat: ./tmp: Is a directory
> ./tmp/cache
> cat: ./tmp/cache: Is a directory
> ./tmp/sessions
> cat: ./tmp/sessions: Is a directory
> ./tmp/sockets
> cat: ./tmp/sockets: Is a directory
> ./tmp/restart.txt
> 
> =====
> ./tmp/pids
> cat: ./tmp/pids: Is a directory
> ./app
> cat: ./app: Is a directory
> ./app/controllers
> cat: ./app/controllers: Is a directory
> ./app/controllers/application.rb
> # Filters added to this controller apply to all controllers in the application.
> # Likewise, all the methods added will be available for all controllers.
> 
> class ApplicationController < ActionController::Base
>   helper :all # include all helpers, all the time
> 
>   # See ActionController::RequestForgeryProtection for details
>   # Uncomment the :secret if you're not using the cookie session store
>   protect_from_forgery # :secret => 'a4e232562d20ccf924a6e6c0bd12b045'
>   
>   # See ActionController::Base for details 
>   # Uncomment this to filter the contents of submitted sensitive data parameters
>   # from your application log (in this case, all fields with names like "password"). 
>   # filter_parameter_logging :password
> end
> 
> =====
> ./app/controllers/splash_controller.rb
> class SplashController < ApplicationController
>   def index
>   end
> 
>   def review
>     offeringses = []
>     for ii in 0..4
>       if company[ii] || product[ii]
>         offeringses.push Offerings.search_for_offering(company[ii], product[ii])
>         
>       end
>     end    
>   end
> 
>   def test
>   end
> end
> 
> =====
> ./app/controllers/companies_controller.rb
> class CompaniesController < ApplicationController
>   # GET /companies
>   # GET /companies.xml
>   def index
>     @companies = Company.find(:all)
> 
>     respond_to do |format|
>       format.html # index.html.erb
>       format.xml  { render :xml => @companies }
>     end
>   end
> 
>   # GET /companies/1
>   # GET /companies/1.xml
>   def show
>     @company = Company.find(params[:id])
> 
>     respond_to do |format|
>       format.html # show.html.erb
>       format.xml  { render :xml => @company }
>     end
>   end
> 
>   # GET /companies/new
>   # GET /companies/new.xml
>   def new
>     @company = Company.new
> 
>     respond_to do |format|
>       format.html # new.html.erb
>       format.xml  { render :xml => @company }
>     end
>   end
> 
>   # GET /companies/1/edit
>   def edit
>     @company = Company.find(params[:id])
>   end
> 
>   # POST /companies
>   # POST /companies.xml
>   def create
>     @company = Company.new(params[:company])
> 
>     respond_to do |format|
>       if @company.save
>         flash[:notice] = 'Company was successfully created.'
>         format.html { redirect_to(@company) }
>         format.xml  { render :xml => @company, :status => :created, :location => @company }
>       else
>         format.html { render :action => "new" }
>         format.xml  { render :xml => @company.errors, :status => :unprocessable_entity }
>       end
>     end
>   end
> 
>   # PUT /companies/1
>   # PUT /companies/1.xml
>   def update
>     @company = Company.find(params[:id])
> 
>     respond_to do |format|
>       if @company.update_attributes(params[:company])
>         flash[:notice] = 'Company was successfully updated.'
>         format.html { redirect_to(@company) }
>         format.xml  { head :ok }
>       else
>         format.html { render :action => "edit" }
>         format.xml  { render :xml => @company.errors, :status => :unprocessable_entity }
>       end
>     end
>   end
> 
>   # DELETE /companies/1
>   # DELETE /companies/1.xml
>   def destroy
>     @company = Company.find(params[:id])
>     @company.destroy
> 
>     respond_to do |format|
>       format.html { redirect_to(companies_url) }
>       format.xml  { head :ok }
>     end
>   end
> end
> 
> =====
> ./app/views
> cat: ./app/views: Is a directory
> ./app/views/splash
> cat: ./app/views/splash: Is a directory
> ./app/views/splash/index.html.erb
> <h1>Look it up!</h1>
> <p>Enter a product from your daily purchases</p>
> 
> <% form_tag '/review', :method => 'post' do -%>
> <table style="margin-bottom: 14px;">
>   <tr>
>     <td><label for="location">City, State or Zip Code:</label></td>
>     <td>
>       <div class="inputtext_304">
>         <input type="text" name="location" />
>       </div>
>     </td>
>     <td><label for="date">Date:</label></td>
>     <td>
>       <div class="inputtext_162">
>         <input type="text" name="date" />
>       </div>
>     </td>
>   </tr>
> </table>
> 
> <table>
>   <tr>
>     <th><label for="company">Company/Organization</label></th>
>     <th><label for="product">Project or Service</label></th>
>     <th><label for="price">Price (US $)</label></th>
>   </tr>
> <% for ii in 0..4 %>
>   <tr>
>     <td>
>       <div class="inputtext_304">
>         <input type="text" name="company[<%= ii %>]" />
>       </div>
>     </td>
>     <td>
>       <div class="inputtext_304">
>         <input type="text" name="product[<%= ii %>]" />
>       </div>
>     </td>
>     <td>
>       <div class="inputtext_162">
>         <input type="text" name="price[<%= ii %>]" />
>       </div>
>     </td>
>   </tr>
> <% end %>
> </table>  
> 
> <center><input type="image" src="/images/review_200.png" alt="Review" /></center>
> <% end -%>
> =====
> ./app/views/splash/test.html
> Testing!
> =====
> ./app/views/companies
> cat: ./app/views/companies: Is a directory
> ./app/views/companies/show.html.erb
> <p>
>   <b>Name:</b>
>   <%=h @company.name %>
> </p>
> 
> <p>
>   <b>Ecojust:</b>
>   <%=h @company.ecojust %>
> </p>
> 
> <p>
>   <b>Socjust:</b>
>   <%=h @company.socjust %>
> </p>
> 
> <p>
>   <b>Environ:</b>
>   <%=h @company.environ %>
> </p>
> 
> <p>
>   <b>Educate:</b>
>   <%=h @company.educate %>
> </p>
> 
> <p>
>   <b>Notes:</b>
>   <%=h @company.notes %>
> </p>
> 
> <p>
>   <b>Date created:</b>
>   <%=h @company.date_created %>
> </p>
> 
> 
> <%= link_to 'Edit', edit_company_path(@company) %> |
> <%= link_to 'Back', companies_path %>
> 
> =====
> ./app/views/companies/new.html.erb
> <h1>New company</h1>
> 
> <% form_for(@company) do |f| %>
>   <%= f.error_messages %>
> 
>   <p>
>     <%= f.label :name %><br />
>     <%= f.text_field :name %>
>   </p>
>   <p>
>     <%= f.label :ecojust %><br />
>     <%= f.text_field :ecojust %>
>   </p>
>   <p>
>     <%= f.label :socjust %><br />
>     <%= f.text_field :socjust %>
>   </p>
>   <p>
>     <%= f.label :environ %><br />
>     <%= f.text_field :environ %>
>   </p>
>   <p>
>     <%= f.label :educate %><br />
>     <%= f.text_field :educate %>
>   </p>
>   <p>
>     <%= f.label :notes %><br />
>     <%= f.text_area :notes %>
>   </p>
>   <p>
>     <%= f.label :date_created %><br />
>     <%= f.datetime_select :date_created %>
>   </p>
>   <p>
>     <%= f.submit "Create" %>
>   </p>
> <% end %>
> 
> <%= link_to 'Back', companies_path %>
> 
> =====
> ./app/views/companies/index.html.erb
> <h1>Listing companies</h1>
> 
> <table>
>   <tr>
>     <th>Name</th>
>     <th>Ecojust</th>
>     <th>Socjust</th>
>     <th>Environ</th>
>     <th>Educate</th>
>     <th>Notes</th>
>     <th>Date created</th>
>   </tr>
> 
> <% for company in @companies %>
>   <tr>
>     <td><%=h company.name %></td>
>     <td><%=h company.ecojust %></td>
>     <td><%=h company.socjust %></td>
>     <td><%=h company.environ %></td>
>     <td><%=h company.educate %></td>
>     <td><%=h company.notes %></td>
>     <td><%=h company.date_created %></td>
>     <td><%= link_to 'Show', company %></td>
>     <td><%= link_to 'Edit', edit_company_path(company) %></td>
>     <td><%= link_to 'Destroy', company, :confirm => 'Are you sure?', :method => :delete %></td>
>   </tr>
> <% end %>
> </table>
> 
> <br />
> 
> <%= link_to 'New company', new_company_path %>
> 
> =====
> ./app/views/companies/edit.html.erb
> <h1>Editing company</h1>
> 
> <% form_for(@company) do |f| %>
>   <%= f.error_messages %>
> 
>   <p>
>     <%= f.label :name %><br />
>     <%= f.text_field :name %>
>   </p>
>   <p>
>     <%= f.label :ecojust %><br />
>     <%= f.text_field :ecojust %>
>   </p>
>   <p>
>     <%= f.label :socjust %><br />
>     <%= f.text_field :socjust %>
>   </p>
>   <p>
>     <%= f.label :environ %><br />
>     <%= f.text_field :environ %>
>   </p>
>   <p>
>     <%= f.label :educate %><br />
>     <%= f.text_field :educate %>
>   </p>
>   <p>
>     <%= f.label :notes %><br />
>     <%= f.text_area :notes %>
>   </p>
>   <p>
>     <%= f.label :date_created %><br />
>     <%= f.datetime_select :date_created %>
>   </p>
>   <p>
>     <%= f.submit "Update" %>
>   </p>
> <% end %>
> 
> <%= link_to 'Show', @company %> |
> <%= link_to 'Back', companies_path %>
> 
> =====
> ./app/views/layouts
> cat: ./app/views/layouts: Is a directory
> ./app/views/layouts/splash.html.erb
> <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
>        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
> 
> <html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
> <head>
>   <meta http-equiv="content-type" content="text/html;charset=UTF-8" />
>   <title>Purchase Aid: <%= controller.action_name %></title>
>   <%= stylesheet_link_tag "base" %>
> </head>
> <body>
> 
> <p style="color: green"><%= flash[:notice] %></p>
> 
> <%= yield  %>
> 
> </body>
> </html>
> 
> =====
> ./app/views/layouts/companies.html.erb
> <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
>        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
> 
> <html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
> <head>
>   <meta http-equiv="content-type" content="text/html;charset=UTF-8" />
>   <title>Companies: <%= controller.action_name %></title>
>   <%= stylesheet_link_tag 'scaffold' %>
> </head>
> <body>
> 
> <p style="color: green"><%= flash[:notice] %></p>
> 
> <%= yield  %>
> 
> </body>
> </html>
> 
> =====
> ./app/helpers
> cat: ./app/helpers: Is a directory
> ./app/helpers/splash_helper.rb
> module SplashHelper
> end
> 
> =====
> ./app/helpers/application_helper.rb
> # Methods added to this helper will be available to all templates in the application.
> module ApplicationHelper
> end
> 
> =====
> ./app/helpers/companies_helper.rb
> module CompaniesHelper
> end
> 
> =====
> ./app/models
> cat: ./app/models: Is a directory
> ./app/models/company.rb
> class Company < ActiveRecord::Base
> end
> 
> =====
> ./app/models/offering.rb
> class Offering < ActiveRecord::Base
>   def self.search_for_purchase(company, product, price)
>     if company
>       companies = search_for_company(company)
>     else
>       companies = []
>     end
>     if product
>       products = search_for_product(product)
>     else
>       products = []
>     end
> 
>     search_for_offering(companies, products)
>   end
> 
>   def self.search_for_company(name)
>     Company.find(:all, :conditions => {:name => name}).concat(find(:all, :conditions => ['company_id is not null and name like ?', name], :group => :company_id).each {|offering| offering.company}).uniq
>   end
> 
>   def self.search_for_product(name)
>     Product.find(:all, :conditions => {:name => name}).concat(find(:all, :conditions => ['product_id is not null and name like ?', name], :group => :product_id).each {|offering| offering.product}).uniq
>   end
> 
>   def self.search_for_offering(companies, products, price, postal)
>     if companies.size > 0 && products.size > 0
>       # Are there any exact matches?
>       offerings = find(:all, :conditions => {:company => companies, :product => products}, order => ['(abs(price - ?) + abs(postal - ?)) desc', price, postal])
>       if offerings.size > 0
>         offerings
>       else
>         [Offering.new {:company => companies[0], :products => products[0], :price => price, :postal => postal}]
>       end
>     else if companies.size > 0
>       [Offering.new {:company => companies[0], :price => price, :postal => postal}]
>     else if products.size > 0
>       [Offering.new {:product => products[0], :price => price, :postal => postal}]
>     else
>       []
>     end
>   end
> end
> 
> =====
> ./Rakefile
> # Add your own tasks in files placed in lib/tasks ending in .rake,
> # for example lib/tasks/capistrano.rake, and they will automatically be available to Rake.
> 
> require(File.join(File.dirname(__FILE__), 'config', 'boot'))
> 
> require 'rake'
> require 'rake/testtask'
> require 'rake/rdoctask'
> 
> require 'tasks/rails'
> 
> =====
> ./config
> cat: ./config: Is a directory
> ./config/database.yml
> # SQLite version 3.x
> #   gem install sqlite3-ruby (not necessary on OS X Leopard)
> development:
>   adapter: mysql
>   database: justeco
>   username: dbuser
>   password: wander1ust
>   host: mysql.existencia.org
> 
> # Warning: The database defined as "test" will be erased and
> # re-generated from your development database when you run "rake".
> # Do not set this db to the same as development or production.
> test:
>   adapter: sqlite3
>   database: db/test.sqlite3
>   pool: 5
>   timeout: 5000
> 
> production:
>   adapter: mysql
>   database: justeco
>   username: dbuser
>   password: wander1ust
>   host: mysql.existencia.org
> 
> =====
> ./config/environments
> cat: ./config/environments: Is a directory
> ./config/environments/production.rb
> # Settings specified here will take precedence over those in config/environment.rb
> 
> # The production environment is meant for finished, "live" apps.
> # Code is not reloaded between requests
> config.cache_classes = true
> 
> # Enable threaded mode
> # config.threadsafe!
> 
> # Use a different logger for distributed setups
> # config.logger = SyslogLogger.new
> 
> # Full error reports are disabled and caching is turned on
> config.action_controller.consider_all_requests_local = false
> config.action_controller.perform_caching             = true
> 
> # Use a different cache store in production
> # config.cache_store = :mem_cache_store
> 
> # Enable serving of images, stylesheets, and javascripts from an asset server
> # config.action_controller.asset_host                  = "http://assets.example.com"
> 
> # Disable delivery errors, bad email addresses will be ignored
> # config.action_mailer.raise_delivery_errors = false
> 
> =====
> ./config/environments/test.rb
> # Settings specified here will take precedence over those in config/environment.rb
> 
> # The test environment is used exclusively to run your application's
> # test suite.  You never need to work with it otherwise.  Remember that
> # your test database is "scratch space" for the test suite and is wiped
> # and recreated between test runs.  Don't rely on the data there!
> config.cache_classes = true
> 
> # Log error messages when you accidentally call methods on nil.
> config.whiny_nils = true
> 
> # Show full error reports and disable caching
> config.action_controller.consider_all_requests_local = true
> config.action_controller.perform_caching             = false
> 
> # Disable request forgery protection in test environment
> config.action_controller.allow_forgery_protection    = false
> 
> # Tell Action Mailer not to deliver emails to the real world.
> # The :test delivery method accumulates sent emails in the
> # ActionMailer::Base.deliveries array.
> config.action_mailer.delivery_method = :test
> 
> =====
> ./config/environments/development.rb
> # Settings specified here will take precedence over those in config/environment.rb
> 
> # In the development environment your application's code is reloaded on
> # every request.  This slows down response time but is perfect for development
> # since you don't have to restart the webserver when you make code changes.
> config.cache_classes = false
> 
> # Log error messages when you accidentally call methods on nil.
> config.whiny_nils = true
> 
> # Show full error reports and disable caching
> config.action_controller.consider_all_requests_local = true
> config.action_view.debug_rjs                         = true
> config.action_controller.perform_caching             = false
> 
> # Don't care if the mailer can't send
> config.action_mailer.raise_delivery_errors = false
> =====
> ./config/environment.rb
> # Be sure to restart your server when you modify this file
> 
> # Uncomment below to force Rails into production mode when
> # you don't control web/app server and can't set it the proper way
> # ENV['RAILS_ENV'] ||= 'production'
> RAILS_ENV = 'development'
> 
> ENV['GEM_PATH'] = '/home/nateclark/.gems:/usr/lib/ruby/gems/1.8'
> 
> # Specifies gem version of Rails to use when vendor/rails is not present
> RAILS_GEM_VERSION = '2.2.2' unless defined? RAILS_GEM_VERSION
> 
> # Bootstrap the Rails environment, frameworks, and default configuration
> require File.join(File.dirname(__FILE__), 'boot')
> 
> Rails::Initializer.run do |config|
>   # Settings in config/environments/* take precedence over those specified here.
>   # Application configuration should go into files in config/initializers
>   # -- all .rb files in that directory are automatically loaded.
>   # See Rails::Configuration for more options.
> 
>   # Skip frameworks you're not going to use. To use Rails without a database
>   # you must remove the Active Record framework.
>   # config.frameworks -= [ :active_record, :active_resource, :action_mailer ]
> 
>   # Specify gems that this application depends on. 
>   # They can then be installed with "rake gems:install" on new installations.
>   # You have to specify the :lib option for libraries, where the Gem name (sqlite3-ruby) differs from the file itself (sqlite3)
>   # config.gem "bj"
>   # config.gem "hpricot", :version => '0.6', :source => "http://code.whytheluckystiff.net"
>   # config.gem "sqlite3-ruby", :lib => "sqlite3"
>   # config.gem "aws-s3", :lib => "aws/s3"
> 
>   # Only load the plugins named here, in the order given. By default, all plugins 
>   # in vendor/plugins are loaded in alphabetical order.
>   # :all can be used as a placeholder for all plugins not explicitly named
>   # config.plugins = [ :exception_notification, :ssl_requirement, :all ]
> 
>   # Add additional load paths for your own custom dirs
>   # config.load_paths += %W( #{RAILS_ROOT}/extras )
> 
>   # Force all environments to use the same logger level
>   # (by default production uses :info, the others :debug)
>   # config.log_level = :debug
> 
>   # Make Time.zone default to the specified zone, and make Active Record store time values
>   # in the database in UTC, and return them converted to the specified local zone.
>   # Run "rake -D time" for a list of tasks for finding time zone names. Comment line to use default local time.
>   config.time_zone = 'UTC'
> 
>   # The internationalization framework can be changed to have another default locale (standard is :en) or more load paths.
>   # All files from config/locales/*.rb,yml are added automatically.
>   # config.i18n.load_path << Dir[File.join(RAILS_ROOT, 'my', 'locales', '*.{rb,yml}')]
>   # config.i18n.default_locale = :de
> 
>   # Your secret key for verifying cookie session data integrity.
>   # If you change this key, all old sessions will become invalid!
>   # Make sure the secret is at least 30 characters and all random, 
>   # no regular words or you'll be exposed to dictionary attacks.
>   config.action_controller.session = {
>     :session_key => '_dev_session',
>     :secret      => '7d81d9517127fcf8d6c45e7b631b9bfd0f3796f4b5576155375a97e9f1266bbb71c725d0123a489a54882033fa4c88f9aaa85f380acdd77ad8903d7788e7e13f'
>   }
> 
>   # Use the database for sessions instead of the cookie-based default,
>   # which shouldn't be used to store highly confidential information
>   # (create the session table with "rake db:sessions:create")
>   # config.action_controller.session_store = :active_record_store
> 
>   # Use SQL instead of Active Record's schema dumper when creating the test database.
>   # This is necessary if your schema can't be completely dumped by the schema dumper,
>   # like if you have constraints or database-specific column types
>   # config.active_record.schema_format = :sql
> 
>   # Activate observers that should always be running
>   # Please note that observers generated using script/generate observer need to have an _observer suffix
>   # config.active_record.observers = :cacher, :garbage_collector, :forum_observer
> end
> 
> =====
> ./config/initializers
> cat: ./config/initializers: Is a directory
> ./config/initializers/CVE-2013-0156.rb
> ActionDispatch::ParamsParser::DEFAULT_PARSERS.delete(Mime::XML)
> 
> =====
> ./config/initializers/new_rails_defaults.rb
> # These settings change the behavior of Rails 2 apps and will be defaults
> # for Rails 3. You can remove this initializer when Rails 3 is released.
> 
> if defined?(ActiveRecord)
>   # Include Active Record class name as root for JSON serialized output.
>   ActiveRecord::Base.include_root_in_json = true
> 
>   # Store the full class name (including module namespace) in STI type column.
>   ActiveRecord::Base.store_full_sti_class = true
> end
> 
> # Use ISO 8601 format for JSON serialized times and dates.
> ActiveSupport.use_standard_json_time_format = true
> 
> # Don't escape HTML entities in JSON, leave that for the #json_escape helper.
> # if you're including raw json in an HTML page.
> ActiveSupport.escape_html_entities_in_json = false
> =====
> ./config/initializers/mime_types.rb
> # Be sure to restart your server when you modify this file.
> 
> # Add new mime types for use in respond_to blocks:
> # Mime::Type.register "text/richtext", :rtf
> # Mime::Type.register_alias "text/html", :iphone
> 
> =====
> ./config/initializers/inflections.rb
> # Be sure to restart your server when you modify this file.
> 
> # Add new inflection rules using the following format 
> # (all these examples are active by default):
> # ActiveSupport::Inflector.inflections do |inflect|
> #   inflect.plural /^(ox)$/i, '\1en'
> #   inflect.singular /^(ox)en/i, '\1'
> #   inflect.irregular 'person', 'people'
> #   inflect.uncountable %w( fish sheep )
> # end
> 
> =====
> ./config/locales
> cat: ./config/locales: Is a directory
> ./config/locales/en.yml
> # Sample localization file for English. Add more files in this directory for other locales.
> # See http://github.com/svenfuchs/rails-i18n/tree/master/rails%2Flocale for starting points.
> 
> en:
>   hello: "Hello world"
> =====
> ./config/boot.rb
> # Don't change this file!
> # Configure your app in config/environment.rb and config/environments/*.rb
> 
> RAILS_ROOT = "#{File.dirname(__FILE__)}/.." unless defined?(RAILS_ROOT)
> 
> module Rails
>   class << self
>     def boot!
>       unless booted?
>         preinitialize
>         pick_boot.run
>       end
>     end
> 
>     def booted?
>       defined? Rails::Initializer
>     end
> 
>     def pick_boot
>       (vendor_rails? ? VendorBoot : GemBoot).new
>     end
> 
>     def vendor_rails?
>       File.exist?("#{RAILS_ROOT}/vendor/rails")
>     end
> 
>     def preinitialize
>       load(preinitializer_path) if File.exist?(preinitializer_path)
>     end
> 
>     def preinitializer_path
>       "#{RAILS_ROOT}/config/preinitializer.rb"
>     end
>   end
> 
>   class Boot
>     def run
>       load_initializer
>       Rails::Initializer.run(:set_load_path)
>     end
>   end
> 
>   class VendorBoot < Boot
>     def load_initializer
>       require "#{RAILS_ROOT}/vendor/rails/railties/lib/initializer"
>       Rails::Initializer.run(:install_gem_spec_stubs)
>     end
>   end
> 
>   class GemBoot < Boot
>     def load_initializer
>       self.class.load_rubygems
>       load_rails_gem
>       require 'initializer'
>     end
> 
>     def load_rails_gem
>       if version = self.class.gem_version
>         gem 'rails', version
>       else
>         gem 'rails'
>       end
>     rescue Gem::LoadError => load_error
>       $stderr.puts %(Missing the Rails #{version} gem. Please `gem install -v=#{version} rails`, update your RAILS_GEM_VERSION setting in config/environment.rb for the Rails version you do have installed, or comment out RAILS_GEM_VERSION to use the latest version installed.)
>       exit 1
>     end
> 
>     class << self
>       def rubygems_version
>         Gem::RubyGemsVersion rescue nil
>       end
> 
>       def gem_version
>         if defined? RAILS_GEM_VERSION
>           RAILS_GEM_VERSION
>         elsif ENV.include?('RAILS_GEM_VERSION')
>           ENV['RAILS_GEM_VERSION']
>         else
>           parse_gem_version(read_environment_rb)
>         end
>       end
> 
>       def load_rubygems
>         require 'rubygems'
>         min_version = '1.3.1'
>         unless rubygems_version >= min_version
>           $stderr.puts %Q(Rails requires RubyGems >= #{min_version} (you have #{rubygems_version}). Please `gem update --system` and try again.)
>           exit 1
>         end
> 
>       rescue LoadError
>         $stderr.puts %Q(Rails requires RubyGems >= #{min_version}. Please install RubyGems and try again: http://rubygems.rubyforge.org)
>         exit 1
>       end
> 
>       def parse_gem_version(text)
>         $1 if text =~ /^[^#]*RAILS_GEM_VERSION\s*=\s*["']([!~<>=]*\s*[\d.]+)["']/
>       end
> 
>       private
>         def read_environment_rb
>           File.read("#{RAILS_ROOT}/config/environment.rb")
>         end
>     end
>   end
> end
> 
> # All that for this:
> Rails.boot!
> 
> =====
> ./config/routes.rb
> ActionController::Routing::Routes.draw do |map|
>   map.resources :companies
> 
>   # The priority is based upon order of creation: first created -> highest priority.
> 
>   # Sample of regular route:
>   #   map.connect 'products/:id', :controller => 'catalog', :action => 'view'
>   # Keep in mind you can assign values other than :controller and :action
> 
>   # Sample of named route:
>   #   map.purchase 'products/:id/purchase', :controller => 'catalog', :action => 'purchase'
>   # This route can be invoked with purchase_url(:id => product.id)
> 
>   # Sample resource route (maps HTTP verbs to controller actions automatically):
>   #   map.resources :products
> 
>   # Sample resource route with options:
>   #   map.resources :products, :member => { :short => :get, :toggle => :post }, :collection => { :sold => :get }
> 
>   # Sample resource route with sub-resources:
>   #   map.resources :products, :has_many => [ :comments, :sales ], :has_one => :seller
>   
>   # Sample resource route with more complex sub-resources
>   #   map.resources :products do |products|
>   #     products.resources :comments
>   #     products.resources :sales, :collection => { :recent => :get }
>   #   end
> 
>   # Sample resource route within a namespace:
>   #   map.namespace :admin do |admin|
>   #     # Directs /admin/products/* to Admin::ProductsController (app/controllers/admin/products_controller.rb)
>   #     admin.resources :products
>   #   end
> 
>   # You can have the root of your site routed with map.root -- just remember to delete public/index.html.
>   map.root :controller => "splash"
> 
>   # See how all your routes lay out with "rake routes"
> 
>   # Install the default routes as the lowest priority.
>   # Note: These default routes make all actions in every controller accessible via GET requests. You should
>   # consider removing the them or commenting them out if you're using named routes and resources.
>   map.connect 'review', :controller => 'splash', :action => 'review'
> 
>   map.connect ':controller/:action/:id'
>   map.connect ':controller/:action/:id.:format'
> end
> 
> =====
> ./doc
> cat: ./doc: Is a directory
> ./doc/todos.txt
> For virsona, write a chat-finding algorithm; then apply it to pulling
> company names out
> 
> =====
> ./doc/README_FOR_APP
> To build the guides:
> 
> * Install source-highlighter (http://www.gnu.org/software/src-highlite/source-highlight.html)
> * Install the mizuho gem (http://github.com/FooBarWidget/mizuho/tree/master)
> * Run `rake guides` from the railties directory
> =====
**assistant**:
> It looks like you have a fairly standard Ruby on Rails application here. The structure and contents are largely consistent with conventional Rails projects, including directories for controllers, models, views, migrations, tests, and public assets. Here's a brief overview of what you have:
> 
> ### Main Components:
> 
> #### Database Migrations
> - `./db/migrate/20091008033339_create_companies.rb`: Migration for creating the `companies` table.
> - `./db/migrate/20100424214035_create_namings.rb`: Migration for creating the `namings` table.
> - `./db/migrate/20100424215804_create_offerings.rb`: Migration for creating the `offerings` table.
> 
> #### Controllers
> - `./app/controllers/application.rb`: Base controller for shared functionalities.
> - `./app/controllers/splash_controller.rb`: Handles splash page and reviewing offerings.
> - `./app/controllers/companies_controller.rb`: Manages CRUD operations for companies.
> 
> #### Models
> - `./app/models/company.rb`: Represents the `Company` model.
> - `./app/models/offering.rb`: Represents the `Offering` model with search functionalities.
> 
> #### Views
> - Located in `./app/views/companies` and `./app/views/splash`: Includes ERB templates for displaying and managing companies and splash page.
> 
> #### Configurations
> - `./config/database.yml`: Database configurations for different environments (development, test, production).
> - `./config/routes.rb`: Routing configurations for the application.
> - `./config/environment.rb`: General Rails application settings and environment configuration.
> 
> #### Public Assets
> - HTML files (e.g., 404.html, 500.html), CSS, and images in `./public`.
> 
> #### Other Directories
> - `./script`, `./test`, `./vendor`, and `./lib` which contain scripts, test cases, potential third-party libraries, and additional Ruby code respectively.
> 
> ### Your Current Tasks:
> - Adding scaffolding for inputting companies.
> - Implementing user accounts for recording dollars spent in each company.
> 
> ### Possible Next Steps:
> 1. **Generate Scaffold for Companies:**
>    You can use Rails scaffold generator to build views, controllers, and routes for companies:
>    ```sh
>    rails generate scaffold Company name:string ecojust:float socjust:float environ:float educate:float notes:text date_created:datetime
>    rake db:migrate
>    ```
> 
> 2. **Implement User Accounts:**
>    Add a User model and authentication framework (like Devise):
>    ```sh
>    rails generate devise:install
>    rails generate devise User
>    rake db:migrate
>    ```
> 
> Would you like me to assist you with generating the scaffold or setting up user authentication? Let me know how you'd like to proceed!
