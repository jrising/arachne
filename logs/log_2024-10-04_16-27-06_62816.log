**assistant**:
> The query is about getting the spreadsheet associated with a Google Form in Apps Script. The error "
**user**:
> I am trying to make a Apps script in google to be run when I submit a google form. It's supposed to interact with the associated spreadsheet. Here's the function:
> ```
> function sendEmails() {
>   var sheet = SpreadsheetApp.getActive().getSheetByName('Form Responses 1');
>   var data = sheet.getDataRange().getValues();
>   
>   for (var i = 1; i < data.length; i++) { // Start at 1 to skip header row
>     var processed = data[i][37]; // Index of the handling column
>     var response = data[i][33] || data[i][30]; // Interests
>     var email = data[i][0]; // Column index for respondent's email
> 
>     // Check if email has already been sent
>     if (!processed) {
>       var recipient;
>       if (response == "Fisheries and natural resource management" || response == "Behaviors and decision-making") {
>         recipient = "abirken@udel.edu";
>       } else if (response == "Environmental policy analysis" || response == "Legal and institutional aspects") {
>         recipient = "oremus@udel.edu";
>       } else if (response == "Climate change risks and policy" || response == "Energy systems and technology") {
>         recipient = "jrising@udel.edu";
>       } else if (response == "Environmental justice" || response == "Sea-level rise and coastal communities") {
>         recipient = "nathanaj@udel.edu";
>       }
>       // Add more conditions as necessary
> 
>       if (recipient) { // Ensure there's an email to send
>         /*var subject = "Your Subject Here";
>         var message = "Your Message Here";
> 
>         MailApp.sendEmail(recipient, subject, message, {
>           cc: email // Optional: CC the original respondent
>         });
>         */
> 
>         // Mark the row as processed by adding a value in the processed column
>         sheet.getRange(i + 1, 37 + 1).setValue(recipient); // Adjust for 1-indexed rows
>       }
>     }
>   }
> }
> ```
> But I get an error: TypeError: Cannot read properties of null (reading 'getSheetByName')
>     at sendEmails(Code:2:41)
> 
> This means that getActive() returns null. How can I get the spreadsheet associated with that form?
**assistant**:
> The error you're encountering indicates that `SpreadsheetApp.getActive()` is returning `null`, which means there isn't an active spreadsheet in the context where your function is running. This often happens if you're trying to run this script outside of a spreadsheet context, such as from an Apps Script editor directly or as a form trigger.
> 
> To correctly access the spreadsheet associated with a Google Form, you should use the link between the form and its response sheet. Hereâ€™s how you can make sure you're accessing the right spreadsheet:
> 
> 1. **Link the Form and Spreadsheet:**
>    Ensure your Google Form is properly linked to a Google Sheets spreadsheet, where responses are recorded. You can do this via the form editor by clicking on the green Sheets icon.
> 
> 2. **Access Spreadsheet with Script Trigger:**
>    Since you're executing this script upon form submissions, you need to install a trigger for that. Here's how you can modify and set up your function:
> 
> ```javascript
> function sendEmails(e) {
>   // Access the form response data using the event object `e`
>   var response = e.values; // This includes all the form responses in a single array
> 
>   var ss = SpreadsheetApp.openById('your-spreadsheet-id'); // Use the spreadsheet ID
>   var sheet = ss.getSheetByName('Form Responses 1');
> 
>   // If directly accessing from the responses, you get the last row directly
>   var email = response[0]; // Assuming the first column is the email
>   var responseValue = response[33] || response[30]; // Adjusted to zero-based index from event response
> 
>   // Determine the recipient
>   var recipient;
>   if (responseValue == "Fisheries and natural resource management" || 
>       responseValue == "Behaviors and decision-making") {
>     recipient = "abirken@udel.edu";
>   } else if (responseValue == "Environmental policy analysis" || 
>              responseValue == "Legal and institutional aspects") {
>     recipient = "oremus@udel.edu";
>   } else if (responseValue == "Climate change risks and policy" || 
>              responseValue == "Energy systems and technology") {
>     recipient = "jrising@udel.edu";
>   } else if (responseValue == "Environmental justice" || 
>              responseValue == "Sea-level rise and coastal communities") {
>     recipient = "nathanaj@udel.edu";
>   }
> 
>   // Mark response as processed in the designated column (assuming column 38 is your processed column)
>   if (recipient) {
>     var row = sheet.getLastRow(); // Since you're running on form submit, it handles the last one
>     sheet.getRange(row, 38).setValue(recipient); // Adjust the column number accordingly
> 
>     /*
>     var subject = "Your Subject Here";
>     var message = "Your Message Here";
> 
>     MailApp.sendEmail(recipient, subject, message, {
>       cc: email // Optional: CC the original respondent
>     });
>     */
>   }
> }
> ```
> 
> 3. **Set Up the Trigger:**
>    - In the Apps Script editor, click on the clock icon on the toolbar to open the "Triggers" pane.
>    - Click on "Add Trigger" at the bottom right.
>    - Set up a trigger for your `sendEmails` function "From form" and "On form submit".
> 
> Replace `'your-spreadsheet-id'` with the actual ID of the spreadsheet. You can find the ID in the URL of the spreadsheet link, which usually looks like `https://docs.google.com/spreadsheets/d/YOUR_SPREADSHEET_ID/edit`.
> 
> This setup should correctly handle form submissions and ensure your script interacts only with the appropriate spreadsheet.
