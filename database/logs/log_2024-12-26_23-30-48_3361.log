James encountered an issue running `pytest` via `subprocess.run` in Python, where the result appeared empty despite visible output in the terminal. I advised him that the correct way to access captured output was through `result.stdout` and `result.stderr`. I also suggested verifying the correctness of `script_name`, considering exceptions when using `check=True`, and checking for terminal-specific configurations that may affect output. The conversation provided practical code examples to help James diagnose and resolve the issue with his `pytest` integration.
